
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08003000  08003000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004598  08003190  08003190  00003190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007728  08007728  00007728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b0  080077b0  00010088  2**0
                  CONTENTS
  4 .ARM          00000008  080077b0  080077b0  000077b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b8  080077b8  00010088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b8  080077b8  000077b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077bc  080077bc  000077bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080077c0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000088  08007848  00010088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08007848  000102dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000100b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d26  00000000  00000000  000100fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d57  00000000  00000000  00021e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00024b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1c  00000000  00000000  00025c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bff5  00000000  00000000  00026994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148e2  00000000  00000000  00042989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab744  00000000  00000000  0005726b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cec  00000000  00000000  001029b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0010769c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08003190 <__do_global_dtors_aux>:
 8003190:	b510      	push	{r4, lr}
 8003192:	4c05      	ldr	r4, [pc, #20]	; (80031a8 <__do_global_dtors_aux+0x18>)
 8003194:	7823      	ldrb	r3, [r4, #0]
 8003196:	b933      	cbnz	r3, 80031a6 <__do_global_dtors_aux+0x16>
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <__do_global_dtors_aux+0x1c>)
 800319a:	b113      	cbz	r3, 80031a2 <__do_global_dtors_aux+0x12>
 800319c:	4804      	ldr	r0, [pc, #16]	; (80031b0 <__do_global_dtors_aux+0x20>)
 800319e:	f3af 8000 	nop.w
 80031a2:	2301      	movs	r3, #1
 80031a4:	7023      	strb	r3, [r4, #0]
 80031a6:	bd10      	pop	{r4, pc}
 80031a8:	20000088 	.word	0x20000088
 80031ac:	00000000 	.word	0x00000000
 80031b0:	08007710 	.word	0x08007710

080031b4 <frame_dummy>:
 80031b4:	b508      	push	{r3, lr}
 80031b6:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <frame_dummy+0x10>)
 80031b8:	b11b      	cbz	r3, 80031c2 <frame_dummy+0xe>
 80031ba:	4903      	ldr	r1, [pc, #12]	; (80031c8 <frame_dummy+0x14>)
 80031bc:	4803      	ldr	r0, [pc, #12]	; (80031cc <frame_dummy+0x18>)
 80031be:	f3af 8000 	nop.w
 80031c2:	bd08      	pop	{r3, pc}
 80031c4:	00000000 	.word	0x00000000
 80031c8:	2000008c 	.word	0x2000008c
 80031cc:	08007710 	.word	0x08007710

080031d0 <memchr>:
 80031d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80031d4:	2a10      	cmp	r2, #16
 80031d6:	db2b      	blt.n	8003230 <memchr+0x60>
 80031d8:	f010 0f07 	tst.w	r0, #7
 80031dc:	d008      	beq.n	80031f0 <memchr+0x20>
 80031de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80031e2:	3a01      	subs	r2, #1
 80031e4:	428b      	cmp	r3, r1
 80031e6:	d02d      	beq.n	8003244 <memchr+0x74>
 80031e8:	f010 0f07 	tst.w	r0, #7
 80031ec:	b342      	cbz	r2, 8003240 <memchr+0x70>
 80031ee:	d1f6      	bne.n	80031de <memchr+0xe>
 80031f0:	b4f0      	push	{r4, r5, r6, r7}
 80031f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80031f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80031fa:	f022 0407 	bic.w	r4, r2, #7
 80031fe:	f07f 0700 	mvns.w	r7, #0
 8003202:	2300      	movs	r3, #0
 8003204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003208:	3c08      	subs	r4, #8
 800320a:	ea85 0501 	eor.w	r5, r5, r1
 800320e:	ea86 0601 	eor.w	r6, r6, r1
 8003212:	fa85 f547 	uadd8	r5, r5, r7
 8003216:	faa3 f587 	sel	r5, r3, r7
 800321a:	fa86 f647 	uadd8	r6, r6, r7
 800321e:	faa5 f687 	sel	r6, r5, r7
 8003222:	b98e      	cbnz	r6, 8003248 <memchr+0x78>
 8003224:	d1ee      	bne.n	8003204 <memchr+0x34>
 8003226:	bcf0      	pop	{r4, r5, r6, r7}
 8003228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800322c:	f002 0207 	and.w	r2, r2, #7
 8003230:	b132      	cbz	r2, 8003240 <memchr+0x70>
 8003232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003236:	3a01      	subs	r2, #1
 8003238:	ea83 0301 	eor.w	r3, r3, r1
 800323c:	b113      	cbz	r3, 8003244 <memchr+0x74>
 800323e:	d1f8      	bne.n	8003232 <memchr+0x62>
 8003240:	2000      	movs	r0, #0
 8003242:	4770      	bx	lr
 8003244:	3801      	subs	r0, #1
 8003246:	4770      	bx	lr
 8003248:	2d00      	cmp	r5, #0
 800324a:	bf06      	itte	eq
 800324c:	4635      	moveq	r5, r6
 800324e:	3803      	subeq	r0, #3
 8003250:	3807      	subne	r0, #7
 8003252:	f015 0f01 	tst.w	r5, #1
 8003256:	d107      	bne.n	8003268 <memchr+0x98>
 8003258:	3001      	adds	r0, #1
 800325a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800325e:	bf02      	ittt	eq
 8003260:	3001      	addeq	r0, #1
 8003262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003266:	3001      	addeq	r0, #1
 8003268:	bcf0      	pop	{r4, r5, r6, r7}
 800326a:	3801      	subs	r0, #1
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop

08003270 <__aeabi_uldivmod>:
 8003270:	b953      	cbnz	r3, 8003288 <__aeabi_uldivmod+0x18>
 8003272:	b94a      	cbnz	r2, 8003288 <__aeabi_uldivmod+0x18>
 8003274:	2900      	cmp	r1, #0
 8003276:	bf08      	it	eq
 8003278:	2800      	cmpeq	r0, #0
 800327a:	bf1c      	itt	ne
 800327c:	f04f 31ff 	movne.w	r1, #4294967295
 8003280:	f04f 30ff 	movne.w	r0, #4294967295
 8003284:	f000 b970 	b.w	8003568 <__aeabi_idiv0>
 8003288:	f1ad 0c08 	sub.w	ip, sp, #8
 800328c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003290:	f000 f806 	bl	80032a0 <__udivmoddi4>
 8003294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800329c:	b004      	add	sp, #16
 800329e:	4770      	bx	lr

080032a0 <__udivmoddi4>:
 80032a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a4:	9e08      	ldr	r6, [sp, #32]
 80032a6:	460d      	mov	r5, r1
 80032a8:	4604      	mov	r4, r0
 80032aa:	460f      	mov	r7, r1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d14a      	bne.n	8003346 <__udivmoddi4+0xa6>
 80032b0:	428a      	cmp	r2, r1
 80032b2:	4694      	mov	ip, r2
 80032b4:	d965      	bls.n	8003382 <__udivmoddi4+0xe2>
 80032b6:	fab2 f382 	clz	r3, r2
 80032ba:	b143      	cbz	r3, 80032ce <__udivmoddi4+0x2e>
 80032bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80032c0:	f1c3 0220 	rsb	r2, r3, #32
 80032c4:	409f      	lsls	r7, r3
 80032c6:	fa20 f202 	lsr.w	r2, r0, r2
 80032ca:	4317      	orrs	r7, r2
 80032cc:	409c      	lsls	r4, r3
 80032ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80032d2:	fa1f f58c 	uxth.w	r5, ip
 80032d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80032da:	0c22      	lsrs	r2, r4, #16
 80032dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80032e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80032e4:	fb01 f005 	mul.w	r0, r1, r5
 80032e8:	4290      	cmp	r0, r2
 80032ea:	d90a      	bls.n	8003302 <__udivmoddi4+0x62>
 80032ec:	eb1c 0202 	adds.w	r2, ip, r2
 80032f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80032f4:	f080 811c 	bcs.w	8003530 <__udivmoddi4+0x290>
 80032f8:	4290      	cmp	r0, r2
 80032fa:	f240 8119 	bls.w	8003530 <__udivmoddi4+0x290>
 80032fe:	3902      	subs	r1, #2
 8003300:	4462      	add	r2, ip
 8003302:	1a12      	subs	r2, r2, r0
 8003304:	b2a4      	uxth	r4, r4
 8003306:	fbb2 f0fe 	udiv	r0, r2, lr
 800330a:	fb0e 2210 	mls	r2, lr, r0, r2
 800330e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003312:	fb00 f505 	mul.w	r5, r0, r5
 8003316:	42a5      	cmp	r5, r4
 8003318:	d90a      	bls.n	8003330 <__udivmoddi4+0x90>
 800331a:	eb1c 0404 	adds.w	r4, ip, r4
 800331e:	f100 32ff 	add.w	r2, r0, #4294967295
 8003322:	f080 8107 	bcs.w	8003534 <__udivmoddi4+0x294>
 8003326:	42a5      	cmp	r5, r4
 8003328:	f240 8104 	bls.w	8003534 <__udivmoddi4+0x294>
 800332c:	4464      	add	r4, ip
 800332e:	3802      	subs	r0, #2
 8003330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8003334:	1b64      	subs	r4, r4, r5
 8003336:	2100      	movs	r1, #0
 8003338:	b11e      	cbz	r6, 8003342 <__udivmoddi4+0xa2>
 800333a:	40dc      	lsrs	r4, r3
 800333c:	2300      	movs	r3, #0
 800333e:	e9c6 4300 	strd	r4, r3, [r6]
 8003342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003346:	428b      	cmp	r3, r1
 8003348:	d908      	bls.n	800335c <__udivmoddi4+0xbc>
 800334a:	2e00      	cmp	r6, #0
 800334c:	f000 80ed 	beq.w	800352a <__udivmoddi4+0x28a>
 8003350:	2100      	movs	r1, #0
 8003352:	e9c6 0500 	strd	r0, r5, [r6]
 8003356:	4608      	mov	r0, r1
 8003358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800335c:	fab3 f183 	clz	r1, r3
 8003360:	2900      	cmp	r1, #0
 8003362:	d149      	bne.n	80033f8 <__udivmoddi4+0x158>
 8003364:	42ab      	cmp	r3, r5
 8003366:	d302      	bcc.n	800336e <__udivmoddi4+0xce>
 8003368:	4282      	cmp	r2, r0
 800336a:	f200 80f8 	bhi.w	800355e <__udivmoddi4+0x2be>
 800336e:	1a84      	subs	r4, r0, r2
 8003370:	eb65 0203 	sbc.w	r2, r5, r3
 8003374:	2001      	movs	r0, #1
 8003376:	4617      	mov	r7, r2
 8003378:	2e00      	cmp	r6, #0
 800337a:	d0e2      	beq.n	8003342 <__udivmoddi4+0xa2>
 800337c:	e9c6 4700 	strd	r4, r7, [r6]
 8003380:	e7df      	b.n	8003342 <__udivmoddi4+0xa2>
 8003382:	b902      	cbnz	r2, 8003386 <__udivmoddi4+0xe6>
 8003384:	deff      	udf	#255	; 0xff
 8003386:	fab2 f382 	clz	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 8090 	bne.w	80034b0 <__udivmoddi4+0x210>
 8003390:	1a8a      	subs	r2, r1, r2
 8003392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8003396:	fa1f fe8c 	uxth.w	lr, ip
 800339a:	2101      	movs	r1, #1
 800339c:	fbb2 f5f7 	udiv	r5, r2, r7
 80033a0:	fb07 2015 	mls	r0, r7, r5, r2
 80033a4:	0c22      	lsrs	r2, r4, #16
 80033a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80033aa:	fb0e f005 	mul.w	r0, lr, r5
 80033ae:	4290      	cmp	r0, r2
 80033b0:	d908      	bls.n	80033c4 <__udivmoddi4+0x124>
 80033b2:	eb1c 0202 	adds.w	r2, ip, r2
 80033b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80033ba:	d202      	bcs.n	80033c2 <__udivmoddi4+0x122>
 80033bc:	4290      	cmp	r0, r2
 80033be:	f200 80cb 	bhi.w	8003558 <__udivmoddi4+0x2b8>
 80033c2:	4645      	mov	r5, r8
 80033c4:	1a12      	subs	r2, r2, r0
 80033c6:	b2a4      	uxth	r4, r4
 80033c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80033cc:	fb07 2210 	mls	r2, r7, r0, r2
 80033d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80033d4:	fb0e fe00 	mul.w	lr, lr, r0
 80033d8:	45a6      	cmp	lr, r4
 80033da:	d908      	bls.n	80033ee <__udivmoddi4+0x14e>
 80033dc:	eb1c 0404 	adds.w	r4, ip, r4
 80033e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80033e4:	d202      	bcs.n	80033ec <__udivmoddi4+0x14c>
 80033e6:	45a6      	cmp	lr, r4
 80033e8:	f200 80bb 	bhi.w	8003562 <__udivmoddi4+0x2c2>
 80033ec:	4610      	mov	r0, r2
 80033ee:	eba4 040e 	sub.w	r4, r4, lr
 80033f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80033f6:	e79f      	b.n	8003338 <__udivmoddi4+0x98>
 80033f8:	f1c1 0720 	rsb	r7, r1, #32
 80033fc:	408b      	lsls	r3, r1
 80033fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8003402:	ea4c 0c03 	orr.w	ip, ip, r3
 8003406:	fa05 f401 	lsl.w	r4, r5, r1
 800340a:	fa20 f307 	lsr.w	r3, r0, r7
 800340e:	40fd      	lsrs	r5, r7
 8003410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8003414:	4323      	orrs	r3, r4
 8003416:	fbb5 f8f9 	udiv	r8, r5, r9
 800341a:	fa1f fe8c 	uxth.w	lr, ip
 800341e:	fb09 5518 	mls	r5, r9, r8, r5
 8003422:	0c1c      	lsrs	r4, r3, #16
 8003424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8003428:	fb08 f50e 	mul.w	r5, r8, lr
 800342c:	42a5      	cmp	r5, r4
 800342e:	fa02 f201 	lsl.w	r2, r2, r1
 8003432:	fa00 f001 	lsl.w	r0, r0, r1
 8003436:	d90b      	bls.n	8003450 <__udivmoddi4+0x1b0>
 8003438:	eb1c 0404 	adds.w	r4, ip, r4
 800343c:	f108 3aff 	add.w	sl, r8, #4294967295
 8003440:	f080 8088 	bcs.w	8003554 <__udivmoddi4+0x2b4>
 8003444:	42a5      	cmp	r5, r4
 8003446:	f240 8085 	bls.w	8003554 <__udivmoddi4+0x2b4>
 800344a:	f1a8 0802 	sub.w	r8, r8, #2
 800344e:	4464      	add	r4, ip
 8003450:	1b64      	subs	r4, r4, r5
 8003452:	b29d      	uxth	r5, r3
 8003454:	fbb4 f3f9 	udiv	r3, r4, r9
 8003458:	fb09 4413 	mls	r4, r9, r3, r4
 800345c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8003460:	fb03 fe0e 	mul.w	lr, r3, lr
 8003464:	45a6      	cmp	lr, r4
 8003466:	d908      	bls.n	800347a <__udivmoddi4+0x1da>
 8003468:	eb1c 0404 	adds.w	r4, ip, r4
 800346c:	f103 35ff 	add.w	r5, r3, #4294967295
 8003470:	d26c      	bcs.n	800354c <__udivmoddi4+0x2ac>
 8003472:	45a6      	cmp	lr, r4
 8003474:	d96a      	bls.n	800354c <__udivmoddi4+0x2ac>
 8003476:	3b02      	subs	r3, #2
 8003478:	4464      	add	r4, ip
 800347a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800347e:	fba3 9502 	umull	r9, r5, r3, r2
 8003482:	eba4 040e 	sub.w	r4, r4, lr
 8003486:	42ac      	cmp	r4, r5
 8003488:	46c8      	mov	r8, r9
 800348a:	46ae      	mov	lr, r5
 800348c:	d356      	bcc.n	800353c <__udivmoddi4+0x29c>
 800348e:	d053      	beq.n	8003538 <__udivmoddi4+0x298>
 8003490:	b156      	cbz	r6, 80034a8 <__udivmoddi4+0x208>
 8003492:	ebb0 0208 	subs.w	r2, r0, r8
 8003496:	eb64 040e 	sbc.w	r4, r4, lr
 800349a:	fa04 f707 	lsl.w	r7, r4, r7
 800349e:	40ca      	lsrs	r2, r1
 80034a0:	40cc      	lsrs	r4, r1
 80034a2:	4317      	orrs	r7, r2
 80034a4:	e9c6 7400 	strd	r7, r4, [r6]
 80034a8:	4618      	mov	r0, r3
 80034aa:	2100      	movs	r1, #0
 80034ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b0:	f1c3 0120 	rsb	r1, r3, #32
 80034b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80034b8:	fa20 f201 	lsr.w	r2, r0, r1
 80034bc:	fa25 f101 	lsr.w	r1, r5, r1
 80034c0:	409d      	lsls	r5, r3
 80034c2:	432a      	orrs	r2, r5
 80034c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80034c8:	fa1f fe8c 	uxth.w	lr, ip
 80034cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80034d0:	fb07 1510 	mls	r5, r7, r0, r1
 80034d4:	0c11      	lsrs	r1, r2, #16
 80034d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80034da:	fb00 f50e 	mul.w	r5, r0, lr
 80034de:	428d      	cmp	r5, r1
 80034e0:	fa04 f403 	lsl.w	r4, r4, r3
 80034e4:	d908      	bls.n	80034f8 <__udivmoddi4+0x258>
 80034e6:	eb1c 0101 	adds.w	r1, ip, r1
 80034ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80034ee:	d22f      	bcs.n	8003550 <__udivmoddi4+0x2b0>
 80034f0:	428d      	cmp	r5, r1
 80034f2:	d92d      	bls.n	8003550 <__udivmoddi4+0x2b0>
 80034f4:	3802      	subs	r0, #2
 80034f6:	4461      	add	r1, ip
 80034f8:	1b49      	subs	r1, r1, r5
 80034fa:	b292      	uxth	r2, r2
 80034fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8003500:	fb07 1115 	mls	r1, r7, r5, r1
 8003504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003508:	fb05 f10e 	mul.w	r1, r5, lr
 800350c:	4291      	cmp	r1, r2
 800350e:	d908      	bls.n	8003522 <__udivmoddi4+0x282>
 8003510:	eb1c 0202 	adds.w	r2, ip, r2
 8003514:	f105 38ff 	add.w	r8, r5, #4294967295
 8003518:	d216      	bcs.n	8003548 <__udivmoddi4+0x2a8>
 800351a:	4291      	cmp	r1, r2
 800351c:	d914      	bls.n	8003548 <__udivmoddi4+0x2a8>
 800351e:	3d02      	subs	r5, #2
 8003520:	4462      	add	r2, ip
 8003522:	1a52      	subs	r2, r2, r1
 8003524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8003528:	e738      	b.n	800339c <__udivmoddi4+0xfc>
 800352a:	4631      	mov	r1, r6
 800352c:	4630      	mov	r0, r6
 800352e:	e708      	b.n	8003342 <__udivmoddi4+0xa2>
 8003530:	4639      	mov	r1, r7
 8003532:	e6e6      	b.n	8003302 <__udivmoddi4+0x62>
 8003534:	4610      	mov	r0, r2
 8003536:	e6fb      	b.n	8003330 <__udivmoddi4+0x90>
 8003538:	4548      	cmp	r0, r9
 800353a:	d2a9      	bcs.n	8003490 <__udivmoddi4+0x1f0>
 800353c:	ebb9 0802 	subs.w	r8, r9, r2
 8003540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8003544:	3b01      	subs	r3, #1
 8003546:	e7a3      	b.n	8003490 <__udivmoddi4+0x1f0>
 8003548:	4645      	mov	r5, r8
 800354a:	e7ea      	b.n	8003522 <__udivmoddi4+0x282>
 800354c:	462b      	mov	r3, r5
 800354e:	e794      	b.n	800347a <__udivmoddi4+0x1da>
 8003550:	4640      	mov	r0, r8
 8003552:	e7d1      	b.n	80034f8 <__udivmoddi4+0x258>
 8003554:	46d0      	mov	r8, sl
 8003556:	e77b      	b.n	8003450 <__udivmoddi4+0x1b0>
 8003558:	3d02      	subs	r5, #2
 800355a:	4462      	add	r2, ip
 800355c:	e732      	b.n	80033c4 <__udivmoddi4+0x124>
 800355e:	4608      	mov	r0, r1
 8003560:	e70a      	b.n	8003378 <__udivmoddi4+0xd8>
 8003562:	4464      	add	r4, ip
 8003564:	3802      	subs	r0, #2
 8003566:	e742      	b.n	80033ee <__udivmoddi4+0x14e>

08003568 <__aeabi_idiv0>:
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop

0800356c <Update_Config_Erase>:
 * @brief 펌웨어 업데이트 정보 삭제
 *
 * @return int
 */
static int Update_Config_Erase(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; /* PAGE 단위 지우기 */
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Page = FLASH_FWINFO_PAGE;          /* 삭제 할 페이지 시작 주소 */
 8003576:	233e      	movs	r3, #62	; 0x3e
 8003578:	613b      	str	r3, [r7, #16]
    EraseInitStruct.NbPages = 1;                       /* 삭제 할 페이지 수 */
 800357a:	2301      	movs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]

    HAL_FLASH_Unlock();
 800357e:	f000 fd75 	bl	800406c <HAL_FLASH_Unlock>
    uint32_t PageError = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	607b      	str	r3, [r7, #4]
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8003586:	1d3a      	adds	r2, r7, #4
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fe42 	bl	8004218 <HAL_FLASHEx_Erase>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <Update_Config_Erase+0x32>
    {
        return 1;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <Update_Config_Erase+0x34>
    }
    return 0;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <Update_Config_Write>:
 * @brief 펌웨어 업데이트 정보 쓰기
 *
 * @param firmwareSize
 */
static void Update_Config_Write(uint32_t firmwareSize)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
    uint32_t Address = FLASH_FWINFO_ADDRESS_START;
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <Update_Config_Write+0x70>)
 80035b2:	61fb      	str	r3, [r7, #28]
    uint64_t tmpFlashReadData[ (sizeof(struct CONFIG_BOOT) / 8) + 1 ] = {
 80035b4:	f107 0308 	add.w	r3, r7, #8
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
        0U,
    };

    memcpy(Boot_Cfg.Idx, "SBAN", 4);
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <Update_Config_Write+0x74>)
 80035c4:	4a16      	ldr	r2, [pc, #88]	; (8003620 <Update_Config_Write+0x78>)
 80035c6:	601a      	str	r2, [r3, #0]
    Boot_Cfg.size = firmwareSize; // 패킷 펌웨어 사이즈
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <Update_Config_Write+0x74>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6053      	str	r3, [r2, #4]
    Boot_Cfg.flag = 1;
 80035ce:	4b13      	ldr	r3, [pc, #76]	; (800361c <Update_Config_Write+0x74>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	609a      	str	r2, [r3, #8]

    memcpy((void *)tmpFlashReadData, (void *)&Boot_Cfg, sizeof(struct CONFIG_BOOT));
 80035d4:	4a11      	ldr	r2, [pc, #68]	; (800361c <Update_Config_Write+0x74>)
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	ca07      	ldmia	r2, {r0, r1, r2}
 80035dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    for (int flashAddrIndex = 0; flashAddrIndex < (sizeof(struct CONFIG_BOOT) / 8) + 1; flashAddrIndex++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	e010      	b.n	8003608 <Update_Config_Write+0x60>
    {
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, tmpFlashReadData[flashAddrIndex]);
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	3320      	adds	r3, #32
 80035ec:	443b      	add	r3, r7
 80035ee:	3b18      	subs	r3, #24
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	69f9      	ldr	r1, [r7, #28]
 80035f6:	2000      	movs	r0, #0
 80035f8:	f000 fccc 	bl	8003f94 <HAL_FLASH_Program>
        Address += 8;
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	3308      	adds	r3, #8
 8003600:	61fb      	str	r3, [r7, #28]
    for (int flashAddrIndex = 0; flashAddrIndex < (sizeof(struct CONFIG_BOOT) / 8) + 1; flashAddrIndex++)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	3301      	adds	r3, #1
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d9eb      	bls.n	80035e6 <Update_Config_Write+0x3e>
    }
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	0801f000 	.word	0x0801f000
 800361c:	200000a4 	.word	0x200000a4
 8003620:	4e414253 	.word	0x4e414253

08003624 <procFirmwareUpdate>:
 * @brief 펌웨어 업데이트 프로세스
 *
 * @param firmwareData
 */
void procFirmwareUpdate()
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
    // 펌웨어 업데이트 테스트
    (void)Update_Config_Erase();
 8003628:	f7ff ffa0 	bl	800356c <Update_Config_Erase>
    Update_Config_Write(0xE000);
 800362c:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8003630:	f7ff ffba 	bl	80035a8 <Update_Config_Write>
    printf("OK");
 8003634:	4802      	ldr	r0, [pc, #8]	; (8003640 <procFirmwareUpdate+0x1c>)
 8003636:	f003 f9f5 	bl	8006a24 <iprintf>
    // NVIC_SystemReset();
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	08007728 	.word	0x08007728

08003644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364a:	f107 030c 	add.w	r3, r7, #12
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	60da      	str	r2, [r3, #12]
 8003658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <MX_GPIO_Init+0x8c>)
 800365c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365e:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <MX_GPIO_Init+0x8c>)
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003666:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <MX_GPIO_Init+0x8c>)
 8003668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003672:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <MX_GPIO_Init+0x8c>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <MX_GPIO_Init+0x8c>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <MX_GPIO_Init+0x8c>)
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800368a:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <MX_GPIO_Init+0x8c>)
 800368c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368e:	4a10      	ldr	r2, [pc, #64]	; (80036d0 <MX_GPIO_Init+0x8c>)
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <MX_GPIO_Init+0x8c>)
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2108      	movs	r1, #8
 80036a6:	480b      	ldr	r0, [pc, #44]	; (80036d4 <MX_GPIO_Init+0x90>)
 80036a8:	f001 f84c 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80036ac:	2308      	movs	r3, #8
 80036ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b0:	2301      	movs	r3, #1
 80036b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80036bc:	f107 030c 	add.w	r3, r7, #12
 80036c0:	4619      	mov	r1, r3
 80036c2:	4804      	ldr	r0, [pc, #16]	; (80036d4 <MX_GPIO_Init+0x90>)
 80036c4:	f000 fecc 	bl	8004460 <HAL_GPIO_Init>

}
 80036c8:	bf00      	nop
 80036ca:	3720      	adds	r7, #32
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	48000400 	.word	0x48000400

080036d8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80036e0:	1d39      	adds	r1, r7, #4
 80036e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036e6:	2201      	movs	r2, #1
 80036e8:	4803      	ldr	r0, [pc, #12]	; (80036f8 <__io_putchar+0x20>)
 80036ea:	f002 fbdf 	bl	8005eac <HAL_UART_Transmit>
   return ch;
 80036ee:	687b      	ldr	r3, [r7, #4]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000104 	.word	0x20000104

080036fc <HAL_TIM_PeriodElapsedCallback>:


GPIO_PinState LD3_PinState = GPIO_PIN_RESET;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, LD3_PinState);
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	2108      	movs	r1, #8
 800370c:	4809      	ldr	r0, [pc, #36]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800370e:	f001 f819 	bl	8004744 <HAL_GPIO_WritePin>
	LD3_PinState = LD3_PinState == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	bf14      	ite	ne
 800371a:	2301      	movne	r3, #1
 800371c:	2300      	moveq	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003724:	701a      	strb	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	200000b0 	.word	0x200000b0
 8003734:	48000400 	.word	0x48000400

08003738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800373c:	f000 faa3 	bl	8003c86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003740:	f000 f816 	bl	8003770 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SCB->VTOR = 0x08003000;
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <main+0x2c>)
 8003746:	4a08      	ldr	r2, [pc, #32]	; (8003768 <main+0x30>)
 8003748:	609a      	str	r2, [r3, #8]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800374a:	f7ff ff7b 	bl	8003644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800374e:	f000 f9d7 	bl	8003b00 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8003752:	f000 f977 	bl	8003a44 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8003756:	4805      	ldr	r0, [pc, #20]	; (800376c <main+0x34>)
 8003758:	f002 f8f4 	bl	8005944 <HAL_TIM_Base_Start_IT>
  procFirmwareUpdate();
 800375c:	f7ff ff62 	bl	8003624 <procFirmwareUpdate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003760:	e7fe      	b.n	8003760 <main+0x28>
 8003762:	bf00      	nop
 8003764:	e000ed00 	.word	0xe000ed00
 8003768:	08003000 	.word	0x08003000
 800376c:	200000b8 	.word	0x200000b8

08003770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b096      	sub	sp, #88	; 0x58
 8003774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	2244      	movs	r2, #68	; 0x44
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f003 f9a5 	bl	8006ace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003784:	463b      	mov	r3, r7
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	609a      	str	r2, [r3, #8]
 800378e:	60da      	str	r2, [r3, #12]
 8003790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003792:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003796:	f001 f80b 	bl	80047b0 <HAL_PWREx_ControlVoltageScaling>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80037a0:	f000 f83c 	bl	800381c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80037a4:	f000 ffe6 	bl	8004774 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <SystemClock_Config+0xa8>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	4a1a      	ldr	r2, [pc, #104]	; (8003818 <SystemClock_Config+0xa8>)
 80037b0:	f023 0318 	bic.w	r3, r3, #24
 80037b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80037b8:	2314      	movs	r3, #20
 80037ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037bc:	2301      	movs	r3, #1
 80037be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80037c0:	2301      	movs	r3, #1
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80037c8:	23a0      	movs	r3, #160	; 0xa0
 80037ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 f841 	bl	800485c <HAL_RCC_OscConfig>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80037e0:	f000 f81c 	bl	800381c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037e4:	230f      	movs	r3, #15
 80037e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80037e8:	2300      	movs	r3, #0
 80037ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037f8:	463b      	mov	r3, r7
 80037fa:	2101      	movs	r1, #1
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 fc8f 	bl	8005120 <HAL_RCC_ClockConfig>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003808:	f000 f808 	bl	800381c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800380c:	f002 f832 	bl	8005874 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003810:	bf00      	nop
 8003812:	3758      	adds	r7, #88	; 0x58
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000

0800381c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003820:	b672      	cpsid	i
}
 8003822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003824:	e7fe      	b.n	8003824 <Error_Handler+0x8>
	...

08003828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <HAL_MspInit+0x44>)
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	4a0e      	ldr	r2, [pc, #56]	; (800386c <HAL_MspInit+0x44>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6613      	str	r3, [r2, #96]	; 0x60
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <HAL_MspInit+0x44>)
 800383c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_MspInit+0x44>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	4a08      	ldr	r2, [pc, #32]	; (800386c <HAL_MspInit+0x44>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003850:	6593      	str	r3, [r2, #88]	; 0x58
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_MspInit+0x44>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000

08003870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003874:	e7fe      	b.n	8003874 <NMI_Handler+0x4>

08003876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800387a:	e7fe      	b.n	800387a <HardFault_Handler+0x4>

0800387c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003880:	e7fe      	b.n	8003880 <MemManage_Handler+0x4>

08003882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003886:	e7fe      	b.n	8003886 <BusFault_Handler+0x4>

08003888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800388c:	e7fe      	b.n	800388c <UsageFault_Handler+0x4>

0800388e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800388e:	b480      	push	{r7}
 8003890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038bc:	f000 fa38 	bl	8003d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038c0:	bf00      	nop
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <TIM6_IRQHandler+0x10>)
 80038ca:	f002 f88f 	bl	80059ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200000b8 	.word	0x200000b8

080038d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e00a      	b.n	8003900 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038ea:	f3af 8000 	nop.w
 80038ee:	4601      	mov	r1, r0
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	60ba      	str	r2, [r7, #8]
 80038f6:	b2ca      	uxtb	r2, r1
 80038f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3301      	adds	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	dbf0      	blt.n	80038ea <_read+0x12>
  }

  return len;
 8003908:	687b      	ldr	r3, [r7, #4]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	e009      	b.n	8003938 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	60ba      	str	r2, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fed3 	bl	80036d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3301      	adds	r3, #1
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	dbf1      	blt.n	8003924 <_write+0x12>
  }
  return len;
 8003940:	687b      	ldr	r3, [r7, #4]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_close>:

int _close(int file)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003972:	605a      	str	r2, [r3, #4]
  return 0;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <_isatty>:

int _isatty(int file)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039bc:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <_sbrk+0x5c>)
 80039be:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <_sbrk+0x60>)
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039c8:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <_sbrk+0x64>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <_sbrk+0x64>)
 80039d2:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <_sbrk+0x68>)
 80039d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <_sbrk+0x64>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d207      	bcs.n	80039f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039e4:	f003 f8c2 	bl	8006b6c <__errno>
 80039e8:	4603      	mov	r3, r0
 80039ea:	220c      	movs	r2, #12
 80039ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039ee:	f04f 33ff 	mov.w	r3, #4294967295
 80039f2:	e009      	b.n	8003a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039f4:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <_sbrk+0x64>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039fa:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <_sbrk+0x64>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	4a05      	ldr	r2, [pc, #20]	; (8003a18 <_sbrk+0x64>)
 8003a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a06:	68fb      	ldr	r3, [r7, #12]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	2000a000 	.word	0x2000a000
 8003a14:	00000400 	.word	0x00000400
 8003a18:	200000b4 	.word	0x200000b4
 8003a1c:	200002e0 	.word	0x200002e0

08003a20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <SystemInit+0x20>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <SystemInit+0x20>)
 8003a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <MX_TIM6_Init+0x68>)
 8003a56:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <MX_TIM6_Init+0x6c>)
 8003a58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000-1;
 8003a5a:	4b14      	ldr	r3, [pc, #80]	; (8003aac <MX_TIM6_Init+0x68>)
 8003a5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a60:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <MX_TIM6_Init+0x68>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32000-1;
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <MX_TIM6_Init+0x68>)
 8003a6a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8003a6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <MX_TIM6_Init+0x68>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a76:	480d      	ldr	r0, [pc, #52]	; (8003aac <MX_TIM6_Init+0x68>)
 8003a78:	f001 ff0c 	bl	8005894 <HAL_TIM_Base_Init>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003a82:	f7ff fecb 	bl	800381c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4806      	ldr	r0, [pc, #24]	; (8003aac <MX_TIM6_Init+0x68>)
 8003a94:	f002 f938 	bl	8005d08 <HAL_TIMEx_MasterConfigSynchronization>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003a9e:	f7ff febd 	bl	800381c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200000b8 	.word	0x200000b8
 8003ab0:	40001000 	.word	0x40001000

08003ab4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0d      	ldr	r2, [pc, #52]	; (8003af8 <HAL_TIM_Base_MspInit+0x44>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d113      	bne.n	8003aee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <HAL_TIM_Base_MspInit+0x48>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	4a0c      	ldr	r2, [pc, #48]	; (8003afc <HAL_TIM_Base_MspInit+0x48>)
 8003acc:	f043 0310 	orr.w	r3, r3, #16
 8003ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <HAL_TIM_Base_MspInit+0x48>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	2036      	movs	r0, #54	; 0x36
 8003ae4:	f000 fa1f 	bl	8003f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003ae8:	2036      	movs	r0, #54	; 0x36
 8003aea:	f000 fa38 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40001000 	.word	0x40001000
 8003afc:	40021000 	.word	0x40021000

08003b00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <MX_USART2_UART_Init+0x58>)
 8003b06:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <MX_USART2_UART_Init+0x5c>)
 8003b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b0a:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <MX_USART2_UART_Init+0x58>)
 8003b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <MX_USART2_UART_Init+0x58>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <MX_USART2_UART_Init+0x58>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <MX_USART2_UART_Init+0x58>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <MX_USART2_UART_Init+0x58>)
 8003b26:	220c      	movs	r2, #12
 8003b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <MX_USART2_UART_Init+0x58>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <MX_USART2_UART_Init+0x58>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <MX_USART2_UART_Init+0x58>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <MX_USART2_UART_Init+0x58>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b42:	4805      	ldr	r0, [pc, #20]	; (8003b58 <MX_USART2_UART_Init+0x58>)
 8003b44:	f002 f964 	bl	8005e10 <HAL_UART_Init>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003b4e:	f7ff fe65 	bl	800381c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000104 	.word	0x20000104
 8003b5c:	40004400 	.word	0x40004400

08003b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b096      	sub	sp, #88	; 0x58
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b78:	f107 0310 	add.w	r3, r7, #16
 8003b7c:	2234      	movs	r2, #52	; 0x34
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f002 ffa4 	bl	8006ace <memset>
  if(uartHandle->Instance==USART2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <HAL_UART_MspInit+0xcc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d148      	bne.n	8003c22 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b90:	2302      	movs	r3, #2
 8003b92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b98:	f107 0310 	add.w	r3, r7, #16
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 fce3 	bl	8005568 <HAL_RCCEx_PeriphCLKConfig>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ba8:	f7ff fe38 	bl	800381c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bac:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <HAL_UART_MspInit+0xd0>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	4a1f      	ldr	r2, [pc, #124]	; (8003c30 <HAL_UART_MspInit+0xd0>)
 8003bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb8:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <HAL_UART_MspInit+0xd0>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc4:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <HAL_UART_MspInit+0xd0>)
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc8:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <HAL_UART_MspInit+0xd0>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bd0:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <HAL_UART_MspInit+0xd0>)
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003bdc:	2304      	movs	r3, #4
 8003bde:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be0:	2302      	movs	r3, #2
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be8:	2303      	movs	r3, #3
 8003bea:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bec:	2307      	movs	r3, #7
 8003bee:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003bf0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bfa:	f000 fc31 	bl	8004460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c02:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c04:	2302      	movs	r3, #2
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003c10:	2303      	movs	r3, #3
 8003c12:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003c14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c1e:	f000 fc1f 	bl	8004460 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c22:	bf00      	nop
 8003c24:	3758      	adds	r7, #88	; 0x58
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40004400 	.word	0x40004400
 8003c30:	40021000 	.word	0x40021000

08003c34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c38:	f7ff fef2 	bl	8003a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c3c:	480c      	ldr	r0, [pc, #48]	; (8003c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c3e:	490d      	ldr	r1, [pc, #52]	; (8003c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c40:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <LoopForever+0xe>)
  movs r3, #0
 8003c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c44:	e002      	b.n	8003c4c <LoopCopyDataInit>

08003c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c4a:	3304      	adds	r3, #4

08003c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c50:	d3f9      	bcc.n	8003c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c54:	4c0a      	ldr	r4, [pc, #40]	; (8003c80 <LoopForever+0x16>)
  movs r3, #0
 8003c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c58:	e001      	b.n	8003c5e <LoopFillZerobss>

08003c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c5c:	3204      	adds	r2, #4

08003c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c60:	d3fb      	bcc.n	8003c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c62:	f002 ff89 	bl	8006b78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c66:	f7ff fd67 	bl	8003738 <main>

08003c6a <LoopForever>:

LoopForever:
    b LoopForever
 8003c6a:	e7fe      	b.n	8003c6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c6c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c74:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003c78:	080077c0 	.word	0x080077c0
  ldr r2, =_sbss
 8003c7c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003c80:	200002dc 	.word	0x200002dc

08003c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c84:	e7fe      	b.n	8003c84 <ADC1_2_IRQHandler>

08003c86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c90:	2003      	movs	r0, #3
 8003c92:	f000 f93d 	bl	8003f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c96:	2000      	movs	r0, #0
 8003c98:	f000 f80e 	bl	8003cb8 <HAL_InitTick>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	71fb      	strb	r3, [r7, #7]
 8003ca6:	e001      	b.n	8003cac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ca8:	f7ff fdbe 	bl	8003828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cac:	79fb      	ldrb	r3, [r7, #7]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003cc4:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <HAL_InitTick+0x6c>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d023      	beq.n	8003d14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ccc:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <HAL_InitTick+0x70>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <HAL_InitTick+0x6c>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f949 	bl	8003f7a <HAL_SYSTICK_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b0f      	cmp	r3, #15
 8003cf2:	d809      	bhi.n	8003d08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	f000 f913 	bl	8003f26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d00:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <HAL_InitTick+0x74>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e007      	b.n	8003d18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e004      	b.n	8003d18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
 8003d12:	e001      	b.n	8003d18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000008 	.word	0x20000008
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	20000004 	.word	0x20000004

08003d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_IncTick+0x20>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_IncTick+0x24>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4413      	add	r3, r2
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <HAL_IncTick+0x24>)
 8003d42:	6013      	str	r3, [r2, #0]
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000008 	.word	0x20000008
 8003d54:	2000018c 	.word	0x2000018c

08003d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <HAL_GetTick+0x14>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	2000018c 	.word	0x2000018c

08003d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003da2:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <__NVIC_SetPriorityGrouping+0x44>)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	60d3      	str	r3, [r2, #12]
}
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	f003 0307 	and.w	r3, r3, #7
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	db0b      	blt.n	8003dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	f003 021f 	and.w	r2, r3, #31
 8003dec:	4907      	ldr	r1, [pc, #28]	; (8003e0c <__NVIC_EnableIRQ+0x38>)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	2001      	movs	r0, #1
 8003df6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	e000e100 	.word	0xe000e100

08003e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	6039      	str	r1, [r7, #0]
 8003e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	db0a      	blt.n	8003e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	490c      	ldr	r1, [pc, #48]	; (8003e5c <__NVIC_SetPriority+0x4c>)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	0112      	lsls	r2, r2, #4
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	440b      	add	r3, r1
 8003e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e38:	e00a      	b.n	8003e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4908      	ldr	r1, [pc, #32]	; (8003e60 <__NVIC_SetPriority+0x50>)
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	3b04      	subs	r3, #4
 8003e48:	0112      	lsls	r2, r2, #4
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	761a      	strb	r2, [r3, #24]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	e000e100 	.word	0xe000e100
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b089      	sub	sp, #36	; 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f1c3 0307 	rsb	r3, r3, #7
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	bf28      	it	cs
 8003e82:	2304      	movcs	r3, #4
 8003e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	2b06      	cmp	r3, #6
 8003e8c:	d902      	bls.n	8003e94 <NVIC_EncodePriority+0x30>
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3b03      	subs	r3, #3
 8003e92:	e000      	b.n	8003e96 <NVIC_EncodePriority+0x32>
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e98:	f04f 32ff 	mov.w	r2, #4294967295
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43da      	mvns	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eac:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb6:	43d9      	mvns	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ebc:	4313      	orrs	r3, r2
         );
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3724      	adds	r7, #36	; 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003edc:	d301      	bcc.n	8003ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e00f      	b.n	8003f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ee2:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <SysTick_Config+0x40>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eea:	210f      	movs	r1, #15
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	f7ff ff8e 	bl	8003e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <SysTick_Config+0x40>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003efa:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <SysTick_Config+0x40>)
 8003efc:	2207      	movs	r2, #7
 8003efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	e000e010 	.word	0xe000e010

08003f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff29 	bl	8003d70 <__NVIC_SetPriorityGrouping>
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f38:	f7ff ff3e 	bl	8003db8 <__NVIC_GetPriorityGrouping>
 8003f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	6978      	ldr	r0, [r7, #20]
 8003f44:	f7ff ff8e 	bl	8003e64 <NVIC_EncodePriority>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff ff5d 	bl	8003e10 <__NVIC_SetPriority>
}
 8003f56:	bf00      	nop
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4603      	mov	r3, r0
 8003f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff31 	bl	8003dd4 <__NVIC_EnableIRQ>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ffa2 	bl	8003ecc <SysTick_Config>
 8003f88:	4603      	mov	r3, r0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003fa6:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_FLASH_Program+0xd0>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_FLASH_Program+0x1e>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e053      	b.n	800405a <HAL_FLASH_Program+0xc6>
 8003fb2:	4b2c      	ldr	r3, [pc, #176]	; (8004064 <HAL_FLASH_Program+0xd0>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fbc:	f000 f878 	bl	80040b0 <FLASH_WaitForLastOperation>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d143      	bne.n	8004052 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_FLASH_Program+0xd0>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003fd0:	4b25      	ldr	r3, [pc, #148]	; (8004068 <HAL_FLASH_Program+0xd4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d009      	beq.n	8003ff0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003fdc:	4b22      	ldr	r3, [pc, #136]	; (8004068 <HAL_FLASH_Program+0xd4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a21      	ldr	r2, [pc, #132]	; (8004068 <HAL_FLASH_Program+0xd4>)
 8003fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003fe8:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <HAL_FLASH_Program+0xd0>)
 8003fea:	2202      	movs	r2, #2
 8003fec:	771a      	strb	r2, [r3, #28]
 8003fee:	e002      	b.n	8003ff6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003ff0:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <HAL_FLASH_Program+0xd0>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d107      	bne.n	800400c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004000:	68b8      	ldr	r0, [r7, #8]
 8004002:	f000 f8ad 	bl	8004160 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8004006:	2301      	movs	r3, #1
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	e010      	b.n	800402e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d002      	beq.n	8004018 <HAL_FLASH_Program+0x84>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d10a      	bne.n	800402e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	4619      	mov	r1, r3
 800401c:	68b8      	ldr	r0, [r7, #8]
 800401e:	f000 f8c5 	bl	80041ac <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d102      	bne.n	800402e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004028:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800402c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800402e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004032:	f000 f83d 	bl	80040b0 <FLASH_WaitForLastOperation>
 8004036:	4603      	mov	r3, r0
 8004038:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d006      	beq.n	800404e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004040:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_FLASH_Program+0xd4>)
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	43db      	mvns	r3, r3
 8004048:	4907      	ldr	r1, [pc, #28]	; (8004068 <HAL_FLASH_Program+0xd4>)
 800404a:	4013      	ands	r3, r2
 800404c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800404e:	f000 f9bd 	bl	80043cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <HAL_FLASH_Program+0xd0>)
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]

  return status;
 8004058:	7dfb      	ldrb	r3, [r7, #23]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c
 8004068:	40022000 	.word	0x40022000

0800406c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_FLASH_Unlock+0x38>)
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	da0b      	bge.n	8004096 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_FLASH_Unlock+0x38>)
 8004080:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <HAL_FLASH_Unlock+0x3c>)
 8004082:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <HAL_FLASH_Unlock+0x38>)
 8004086:	4a09      	ldr	r2, [pc, #36]	; (80040ac <HAL_FLASH_Unlock+0x40>)
 8004088:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_FLASH_Unlock+0x38>)
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	da01      	bge.n	8004096 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004096:	79fb      	ldrb	r3, [r7, #7]
}
 8004098:	4618      	mov	r0, r3
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40022000 	.word	0x40022000
 80040a8:	45670123 	.word	0x45670123
 80040ac:	cdef89ab 	.word	0xcdef89ab

080040b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80040b8:	f7ff fe4e 	bl	8003d58 <HAL_GetTick>
 80040bc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80040be:	e00d      	b.n	80040dc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d009      	beq.n	80040dc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80040c8:	f7ff fe46 	bl	8003d58 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d801      	bhi.n	80040dc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e036      	b.n	800414a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80040dc:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <FLASH_WaitForLastOperation+0xa4>)
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1eb      	bne.n	80040c0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80040e8:	4b1a      	ldr	r3, [pc, #104]	; (8004154 <FLASH_WaitForLastOperation+0xa4>)
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <FLASH_WaitForLastOperation+0xa8>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01e      	beq.n	8004136 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80040f8:	4b18      	ldr	r3, [pc, #96]	; (800415c <FLASH_WaitForLastOperation+0xac>)
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
 8004100:	4a16      	ldr	r2, [pc, #88]	; (800415c <FLASH_WaitForLastOperation+0xac>)
 8004102:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <FLASH_WaitForLastOperation+0x6e>
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <FLASH_WaitForLastOperation+0xa4>)
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004118:	490e      	ldr	r1, [pc, #56]	; (8004154 <FLASH_WaitForLastOperation+0xa4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	618b      	str	r3, [r1, #24]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <FLASH_WaitForLastOperation+0x82>
 8004128:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <FLASH_WaitForLastOperation+0xa4>)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004130:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e009      	b.n	800414a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004136:	4b07      	ldr	r3, [pc, #28]	; (8004154 <FLASH_WaitForLastOperation+0xa4>)
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <FLASH_WaitForLastOperation+0xa4>)
 8004144:	2201      	movs	r2, #1
 8004146:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40022000 	.word	0x40022000
 8004158:	0002c3fa 	.word	0x0002c3fa
 800415c:	2000000c 	.word	0x2000000c

08004160 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <FLASH_Program_DoubleWord+0x48>)
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <FLASH_Program_DoubleWord+0x48>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800417e:	f3bf 8f6f 	isb	sy
}
 8004182:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8004184:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	000a      	movs	r2, r1
 8004192:	2300      	movs	r3, #0
 8004194:	68f9      	ldr	r1, [r7, #12]
 8004196:	3104      	adds	r1, #4
 8004198:	4613      	mov	r3, r2
 800419a:	600b      	str	r3, [r1, #0]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40022000 	.word	0x40022000

080041ac <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	; 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80041b6:	2340      	movs	r3, #64	; 0x40
 80041b8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80041c2:	4b14      	ldr	r3, [pc, #80]	; (8004214 <FLASH_Program_Fast+0x68>)
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	4a13      	ldr	r2, [pc, #76]	; (8004214 <FLASH_Program_Fast+0x68>)
 80041c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ce:	f3ef 8310 	mrs	r3, PRIMASK
 80041d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80041d4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80041d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80041d8:	b672      	cpsid	i
}
 80041da:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	3304      	adds	r3, #4
 80041e8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	3304      	adds	r3, #4
 80041ee:	617b      	str	r3, [r7, #20]
    row_index--;
 80041f0:	7ffb      	ldrb	r3, [r7, #31]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80041f6:	7ffb      	ldrb	r3, [r7, #31]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ef      	bne.n	80041dc <FLASH_Program_Fast+0x30>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f383 8810 	msr	PRIMASK, r3
}
 8004206:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004208:	bf00      	nop
 800420a:	3724      	adds	r7, #36	; 0x24
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40022000 	.word	0x40022000

08004218 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004222:	4b47      	ldr	r3, [pc, #284]	; (8004340 <HAL_FLASHEx_Erase+0x128>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_FLASHEx_Erase+0x16>
 800422a:	2302      	movs	r3, #2
 800422c:	e083      	b.n	8004336 <HAL_FLASHEx_Erase+0x11e>
 800422e:	4b44      	ldr	r3, [pc, #272]	; (8004340 <HAL_FLASHEx_Erase+0x128>)
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004234:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004238:	f7ff ff3a 	bl	80040b0 <FLASH_WaitForLastOperation>
 800423c:	4603      	mov	r3, r0
 800423e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d173      	bne.n	800432e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004246:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <HAL_FLASHEx_Erase+0x128>)
 8004248:	2200      	movs	r2, #0
 800424a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800424c:	4b3d      	ldr	r3, [pc, #244]	; (8004344 <HAL_FLASHEx_Erase+0x12c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004258:	4b3a      	ldr	r3, [pc, #232]	; (8004344 <HAL_FLASHEx_Erase+0x12c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004264:	4b37      	ldr	r3, [pc, #220]	; (8004344 <HAL_FLASHEx_Erase+0x12c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a36      	ldr	r2, [pc, #216]	; (8004344 <HAL_FLASHEx_Erase+0x12c>)
 800426a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800426e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004270:	4b33      	ldr	r3, [pc, #204]	; (8004340 <HAL_FLASHEx_Erase+0x128>)
 8004272:	2203      	movs	r2, #3
 8004274:	771a      	strb	r2, [r3, #28]
 8004276:	e016      	b.n	80042a6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <HAL_FLASHEx_Erase+0x128>)
 800427a:	2201      	movs	r2, #1
 800427c:	771a      	strb	r2, [r3, #28]
 800427e:	e012      	b.n	80042a6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004280:	4b30      	ldr	r3, [pc, #192]	; (8004344 <HAL_FLASHEx_Erase+0x12c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d009      	beq.n	80042a0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800428c:	4b2d      	ldr	r3, [pc, #180]	; (8004344 <HAL_FLASHEx_Erase+0x12c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2c      	ldr	r2, [pc, #176]	; (8004344 <HAL_FLASHEx_Erase+0x12c>)
 8004292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004296:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004298:	4b29      	ldr	r3, [pc, #164]	; (8004340 <HAL_FLASHEx_Erase+0x128>)
 800429a:	2202      	movs	r2, #2
 800429c:	771a      	strb	r2, [r3, #28]
 800429e:	e002      	b.n	80042a6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <HAL_FLASHEx_Erase+0x128>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d111      	bne.n	80042d2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f848 	bl	8004348 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042bc:	f7ff fef8 	bl	80040b0 <FLASH_WaitForLastOperation>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80042c4:	4b1f      	ldr	r3, [pc, #124]	; (8004344 <HAL_FLASHEx_Erase+0x12c>)
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_FLASHEx_Erase+0x12c>)
 80042ca:	f023 0304 	bic.w	r3, r3, #4
 80042ce:	6153      	str	r3, [r2, #20]
 80042d0:	e02b      	b.n	800432a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295
 80042d8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	e01b      	b.n	800431a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4619      	mov	r1, r3
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f000 f84b 	bl	8004384 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042f2:	f7ff fedd 	bl	80040b0 <FLASH_WaitForLastOperation>
 80042f6:	4603      	mov	r3, r0
 80042f8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <HAL_FLASHEx_Erase+0x12c>)
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	4a11      	ldr	r2, [pc, #68]	; (8004344 <HAL_FLASHEx_Erase+0x12c>)
 8004300:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8004304:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	601a      	str	r2, [r3, #0]
          break;
 8004312:	e00a      	b.n	800432a <HAL_FLASHEx_Erase+0x112>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	3301      	adds	r3, #1
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	4413      	add	r3, r2
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	429a      	cmp	r2, r3
 8004328:	d3db      	bcc.n	80042e2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800432a:	f000 f84f 	bl	80043cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <HAL_FLASHEx_Erase+0x128>)
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]

  return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	2000000c 	.word	0x2000000c
 8004344:	40022000 	.word	0x40022000

08004348 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <FLASH_MassErase+0x38>)
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	4a08      	ldr	r2, [pc, #32]	; (8004380 <FLASH_MassErase+0x38>)
 8004360:	f043 0304 	orr.w	r3, r3, #4
 8004364:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <FLASH_MassErase+0x38>)
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	4a05      	ldr	r2, [pc, #20]	; (8004380 <FLASH_MassErase+0x38>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004370:	6153      	str	r3, [r2, #20]
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40022000 	.word	0x40022000

08004384 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800438e:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <FLASH_PageErase+0x44>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800439e:	490a      	ldr	r1, [pc, #40]	; (80043c8 <FLASH_PageErase+0x44>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80043a4:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <FLASH_PageErase+0x44>)
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	4a07      	ldr	r2, [pc, #28]	; (80043c8 <FLASH_PageErase+0x44>)
 80043aa:	f043 0302 	orr.w	r3, r3, #2
 80043ae:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <FLASH_PageErase+0x44>)
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <FLASH_PageErase+0x44>)
 80043b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ba:	6153      	str	r3, [r2, #20]
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40022000 	.word	0x40022000

080043cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80043d2:	4b21      	ldr	r3, [pc, #132]	; (8004458 <FLASH_FlushCaches+0x8c>)
 80043d4:	7f1b      	ldrb	r3, [r3, #28]
 80043d6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d002      	beq.n	80043e4 <FLASH_FlushCaches+0x18>
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d117      	bne.n	8004414 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <FLASH_FlushCaches+0x90>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <FLASH_FlushCaches+0x90>)
 80043ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80043f0:	4b1a      	ldr	r3, [pc, #104]	; (800445c <FLASH_FlushCaches+0x90>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a19      	ldr	r2, [pc, #100]	; (800445c <FLASH_FlushCaches+0x90>)
 80043f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b17      	ldr	r3, [pc, #92]	; (800445c <FLASH_FlushCaches+0x90>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a16      	ldr	r2, [pc, #88]	; (800445c <FLASH_FlushCaches+0x90>)
 8004402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004406:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004408:	4b14      	ldr	r3, [pc, #80]	; (800445c <FLASH_FlushCaches+0x90>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a13      	ldr	r2, [pc, #76]	; (800445c <FLASH_FlushCaches+0x90>)
 800440e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004412:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d002      	beq.n	8004420 <FLASH_FlushCaches+0x54>
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d111      	bne.n	8004444 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <FLASH_FlushCaches+0x90>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0d      	ldr	r2, [pc, #52]	; (800445c <FLASH_FlushCaches+0x90>)
 8004426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <FLASH_FlushCaches+0x90>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <FLASH_FlushCaches+0x90>)
 8004432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004436:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <FLASH_FlushCaches+0x90>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a07      	ldr	r2, [pc, #28]	; (800445c <FLASH_FlushCaches+0x90>)
 800443e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004442:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004444:	4b04      	ldr	r3, [pc, #16]	; (8004458 <FLASH_FlushCaches+0x8c>)
 8004446:	2200      	movs	r2, #0
 8004448:	771a      	strb	r2, [r3, #28]
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	2000000c 	.word	0x2000000c
 800445c:	40022000 	.word	0x40022000

08004460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800446e:	e14e      	b.n	800470e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	fa01 f303 	lsl.w	r3, r1, r3
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8140 	beq.w	8004708 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d005      	beq.n	80044a0 <HAL_GPIO_Init+0x40>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d130      	bne.n	8004502 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	2203      	movs	r2, #3
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044d6:	2201      	movs	r2, #1
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4013      	ands	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	f003 0201 	and.w	r2, r3, #1
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b03      	cmp	r3, #3
 800450c:	d017      	beq.n	800453e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	2203      	movs	r2, #3
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4013      	ands	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d123      	bne.n	8004592 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	08da      	lsrs	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3208      	adds	r2, #8
 8004552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004556:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	220f      	movs	r2, #15
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	08da      	lsrs	r2, r3, #3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3208      	adds	r2, #8
 800458c:	6939      	ldr	r1, [r7, #16]
 800458e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	2203      	movs	r2, #3
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f003 0203 	and.w	r2, r3, #3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 809a 	beq.w	8004708 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d4:	4b55      	ldr	r3, [pc, #340]	; (800472c <HAL_GPIO_Init+0x2cc>)
 80045d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d8:	4a54      	ldr	r2, [pc, #336]	; (800472c <HAL_GPIO_Init+0x2cc>)
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	6613      	str	r3, [r2, #96]	; 0x60
 80045e0:	4b52      	ldr	r3, [pc, #328]	; (800472c <HAL_GPIO_Init+0x2cc>)
 80045e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045ec:	4a50      	ldr	r2, [pc, #320]	; (8004730 <HAL_GPIO_Init+0x2d0>)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	089b      	lsrs	r3, r3, #2
 80045f2:	3302      	adds	r3, #2
 80045f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	220f      	movs	r2, #15
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004616:	d013      	beq.n	8004640 <HAL_GPIO_Init+0x1e0>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a46      	ldr	r2, [pc, #280]	; (8004734 <HAL_GPIO_Init+0x2d4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00d      	beq.n	800463c <HAL_GPIO_Init+0x1dc>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a45      	ldr	r2, [pc, #276]	; (8004738 <HAL_GPIO_Init+0x2d8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <HAL_GPIO_Init+0x1d8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a44      	ldr	r2, [pc, #272]	; (800473c <HAL_GPIO_Init+0x2dc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d101      	bne.n	8004634 <HAL_GPIO_Init+0x1d4>
 8004630:	2303      	movs	r3, #3
 8004632:	e006      	b.n	8004642 <HAL_GPIO_Init+0x1e2>
 8004634:	2307      	movs	r3, #7
 8004636:	e004      	b.n	8004642 <HAL_GPIO_Init+0x1e2>
 8004638:	2302      	movs	r3, #2
 800463a:	e002      	b.n	8004642 <HAL_GPIO_Init+0x1e2>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <HAL_GPIO_Init+0x1e2>
 8004640:	2300      	movs	r3, #0
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	f002 0203 	and.w	r2, r2, #3
 8004648:	0092      	lsls	r2, r2, #2
 800464a:	4093      	lsls	r3, r2
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004652:	4937      	ldr	r1, [pc, #220]	; (8004730 <HAL_GPIO_Init+0x2d0>)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	089b      	lsrs	r3, r3, #2
 8004658:	3302      	adds	r3, #2
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004660:	4b37      	ldr	r3, [pc, #220]	; (8004740 <HAL_GPIO_Init+0x2e0>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	43db      	mvns	r3, r3
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4013      	ands	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004684:	4a2e      	ldr	r2, [pc, #184]	; (8004740 <HAL_GPIO_Init+0x2e0>)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800468a:	4b2d      	ldr	r3, [pc, #180]	; (8004740 <HAL_GPIO_Init+0x2e0>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	43db      	mvns	r3, r3
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4013      	ands	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046ae:	4a24      	ldr	r2, [pc, #144]	; (8004740 <HAL_GPIO_Init+0x2e0>)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046b4:	4b22      	ldr	r3, [pc, #136]	; (8004740 <HAL_GPIO_Init+0x2e0>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	43db      	mvns	r3, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046d8:	4a19      	ldr	r2, [pc, #100]	; (8004740 <HAL_GPIO_Init+0x2e0>)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80046de:	4b18      	ldr	r3, [pc, #96]	; (8004740 <HAL_GPIO_Init+0x2e0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004702:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <HAL_GPIO_Init+0x2e0>)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3301      	adds	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	f47f aea9 	bne.w	8004470 <HAL_GPIO_Init+0x10>
  }
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40021000 	.word	0x40021000
 8004730:	40010000 	.word	0x40010000
 8004734:	48000400 	.word	0x48000400
 8004738:	48000800 	.word	0x48000800
 800473c:	48000c00 	.word	0x48000c00
 8004740:	40010400 	.word	0x40010400

08004744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
 8004750:	4613      	mov	r3, r2
 8004752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004754:	787b      	ldrb	r3, [r7, #1]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800475a:	887a      	ldrh	r2, [r7, #2]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004760:	e002      	b.n	8004768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004762:	887a      	ldrh	r2, [r7, #2]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004782:	6013      	str	r3, [r2, #0]
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40007000 	.word	0x40007000

08004794 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004798:	4b04      	ldr	r3, [pc, #16]	; (80047ac <HAL_PWREx_GetVoltageRange+0x18>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40007000 	.word	0x40007000

080047b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047be:	d130      	bne.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047c0:	4b23      	ldr	r3, [pc, #140]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047cc:	d038      	beq.n	8004840 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047d6:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047de:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2232      	movs	r2, #50	; 0x32
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
 80047e8:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	0c9b      	lsrs	r3, r3, #18
 80047f0:	3301      	adds	r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047f4:	e002      	b.n	80047fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047fc:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004808:	d102      	bne.n	8004810 <HAL_PWREx_ControlVoltageScaling+0x60>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f2      	bne.n	80047f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481c:	d110      	bne.n	8004840 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e00f      	b.n	8004842 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482e:	d007      	beq.n	8004840 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004838:	4a05      	ldr	r2, [pc, #20]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800483a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800483e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40007000 	.word	0x40007000
 8004854:	20000000 	.word	0x20000000
 8004858:	431bde83 	.word	0x431bde83

0800485c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f000 bc4f 	b.w	800510e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004870:	4b97      	ldr	r3, [pc, #604]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800487a:	4b95      	ldr	r3, [pc, #596]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 80e6 	beq.w	8004a5e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d007      	beq.n	80048a8 <HAL_RCC_OscConfig+0x4c>
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	2b0c      	cmp	r3, #12
 800489c:	f040 808d 	bne.w	80049ba <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	f040 8089 	bne.w	80049ba <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048a8:	4b89      	ldr	r3, [pc, #548]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d006      	beq.n	80048c2 <HAL_RCC_OscConfig+0x66>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d102      	bne.n	80048c2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f000 bc26 	b.w	800510e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c6:	4b82      	ldr	r3, [pc, #520]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d004      	beq.n	80048dc <HAL_RCC_OscConfig+0x80>
 80048d2:	4b7f      	ldr	r3, [pc, #508]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048da:	e005      	b.n	80048e8 <HAL_RCC_OscConfig+0x8c>
 80048dc:	4b7c      	ldr	r3, [pc, #496]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 80048de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d224      	bcs.n	8004936 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fdd9 	bl	80054a8 <RCC_SetFlashLatencyFromMSIRange>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f000 bc06 	b.w	800510e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004902:	4b73      	ldr	r3, [pc, #460]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a72      	ldr	r2, [pc, #456]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004908:	f043 0308 	orr.w	r3, r3, #8
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	4b70      	ldr	r3, [pc, #448]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	496d      	ldr	r1, [pc, #436]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 800491c:	4313      	orrs	r3, r2
 800491e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004920:	4b6b      	ldr	r3, [pc, #428]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	4968      	ldr	r1, [pc, #416]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
 8004934:	e025      	b.n	8004982 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004936:	4b66      	ldr	r3, [pc, #408]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a65      	ldr	r2, [pc, #404]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 800493c:	f043 0308 	orr.w	r3, r3, #8
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	4b63      	ldr	r3, [pc, #396]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	4960      	ldr	r1, [pc, #384]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004950:	4313      	orrs	r3, r2
 8004952:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004954:	4b5e      	ldr	r3, [pc, #376]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	495b      	ldr	r1, [pc, #364]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fd98 	bl	80054a8 <RCC_SetFlashLatencyFromMSIRange>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e3c5      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004982:	f000 fccd 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 8004986:	4602      	mov	r2, r0
 8004988:	4b51      	ldr	r3, [pc, #324]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	4950      	ldr	r1, [pc, #320]	; (8004ad4 <HAL_RCC_OscConfig+0x278>)
 8004994:	5ccb      	ldrb	r3, [r1, r3]
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	fa22 f303 	lsr.w	r3, r2, r3
 800499e:	4a4e      	ldr	r2, [pc, #312]	; (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80049a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049a2:	4b4e      	ldr	r3, [pc, #312]	; (8004adc <HAL_RCC_OscConfig+0x280>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff f986 	bl	8003cb8 <HAL_InitTick>
 80049ac:	4603      	mov	r3, r0
 80049ae:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d052      	beq.n	8004a5c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	e3a9      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d032      	beq.n	8004a28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049c2:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a42      	ldr	r2, [pc, #264]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049ce:	f7ff f9c3 	bl	8003d58 <HAL_GetTick>
 80049d2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049d4:	e008      	b.n	80049e8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049d6:	f7ff f9bf 	bl	8003d58 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e392      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049e8:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f0      	beq.n	80049d6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049f4:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a35      	ldr	r2, [pc, #212]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 80049fa:	f043 0308 	orr.w	r3, r3, #8
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b33      	ldr	r3, [pc, #204]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	4930      	ldr	r1, [pc, #192]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a12:	4b2f      	ldr	r3, [pc, #188]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	492b      	ldr	r1, [pc, #172]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]
 8004a26:	e01a      	b.n	8004a5e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a28:	4b29      	ldr	r3, [pc, #164]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a34:	f7ff f990 	bl	8003d58 <HAL_GetTick>
 8004a38:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a3c:	f7ff f98c 	bl	8003d58 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e35f      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x1e0>
 8004a5a:	e000      	b.n	8004a5e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d073      	beq.n	8004b52 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_OscConfig+0x220>
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d10e      	bne.n	8004a94 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d10b      	bne.n	8004a94 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d063      	beq.n	8004b50 <HAL_RCC_OscConfig+0x2f4>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d15f      	bne.n	8004b50 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e33c      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9c:	d106      	bne.n	8004aac <HAL_RCC_OscConfig+0x250>
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e025      	b.n	8004af8 <HAL_RCC_OscConfig+0x29c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab4:	d114      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x284>
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a05      	ldr	r2, [pc, #20]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a02      	ldr	r2, [pc, #8]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e013      	b.n	8004af8 <HAL_RCC_OscConfig+0x29c>
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	08007734 	.word	0x08007734
 8004ad8:	20000000 	.word	0x20000000
 8004adc:	20000004 	.word	0x20000004
 8004ae0:	4b8f      	ldr	r3, [pc, #572]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a8e      	ldr	r2, [pc, #568]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b8c      	ldr	r3, [pc, #560]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a8b      	ldr	r2, [pc, #556]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d013      	beq.n	8004b28 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7ff f92a 	bl	8003d58 <HAL_GetTick>
 8004b04:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b08:	f7ff f926 	bl	8003d58 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e2f9      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b1a:	4b81      	ldr	r3, [pc, #516]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0x2ac>
 8004b26:	e014      	b.n	8004b52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7ff f916 	bl	8003d58 <HAL_GetTick>
 8004b2c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b30:	f7ff f912 	bl	8003d58 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	; 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e2e5      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b42:	4b77      	ldr	r3, [pc, #476]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x2d4>
 8004b4e:	e000      	b.n	8004b52 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d060      	beq.n	8004c20 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_OscConfig+0x314>
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	2b0c      	cmp	r3, #12
 8004b68:	d119      	bne.n	8004b9e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d116      	bne.n	8004b9e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b70:	4b6b      	ldr	r3, [pc, #428]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_OscConfig+0x32c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e2c2      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b65      	ldr	r3, [pc, #404]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	4962      	ldr	r1, [pc, #392]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b9c:	e040      	b.n	8004c20 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d023      	beq.n	8004bee <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba6:	4b5e      	ldr	r3, [pc, #376]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a5d      	ldr	r2, [pc, #372]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb2:	f7ff f8d1 	bl	8003d58 <HAL_GetTick>
 8004bb6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bba:	f7ff f8cd 	bl	8003d58 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e2a0      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bcc:	4b54      	ldr	r3, [pc, #336]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0f0      	beq.n	8004bba <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd8:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	494e      	ldr	r1, [pc, #312]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]
 8004bec:	e018      	b.n	8004c20 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bee:	4b4c      	ldr	r3, [pc, #304]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a4b      	ldr	r2, [pc, #300]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfa:	f7ff f8ad 	bl	8003d58 <HAL_GetTick>
 8004bfe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c02:	f7ff f8a9 	bl	8003d58 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e27c      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c14:	4b42      	ldr	r3, [pc, #264]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8082 	beq.w	8004d32 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d05f      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004c36:	4b3a      	ldr	r3, [pc, #232]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d037      	beq.n	8004cbc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d006      	beq.n	8004c64 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e254      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01b      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004c6e:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c74:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c7e:	f7ff f86b 	bl	8003d58 <HAL_GetTick>
 8004c82:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c86:	f7ff f867 	bl	8003d58 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b11      	cmp	r3, #17
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e23a      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ef      	bne.n	8004c86 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cac:	f023 0210 	bic.w	r2, r3, #16
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	491a      	ldr	r1, [pc, #104]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cbc:	4b18      	ldr	r3, [pc, #96]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc2:	4a17      	ldr	r2, [pc, #92]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ccc:	f7ff f844 	bl	8003d58 <HAL_GetTick>
 8004cd0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd4:	f7ff f840 	bl	8003d58 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b11      	cmp	r3, #17
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e213      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0ef      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x478>
 8004cf4:	e01d      	b.n	8004d32 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfc:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <HAL_RCC_OscConfig+0x4c4>)
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7ff f827 	bl	8003d58 <HAL_GetTick>
 8004d0a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0e:	f7ff f823 	bl	8003d58 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b11      	cmp	r3, #17
 8004d1a:	d903      	bls.n	8004d24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e1f6      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
 8004d20:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d24:	4ba9      	ldr	r3, [pc, #676]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ed      	bne.n	8004d0e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80bd 	beq.w	8004eba <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d46:	4ba1      	ldr	r3, [pc, #644]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10e      	bne.n	8004d70 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d52:	4b9e      	ldr	r3, [pc, #632]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	4a9d      	ldr	r2, [pc, #628]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d5e:	4b9b      	ldr	r3, [pc, #620]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d70:	4b97      	ldr	r3, [pc, #604]	; (8004fd0 <HAL_RCC_OscConfig+0x774>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d118      	bne.n	8004dae <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d7c:	4b94      	ldr	r3, [pc, #592]	; (8004fd0 <HAL_RCC_OscConfig+0x774>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a93      	ldr	r2, [pc, #588]	; (8004fd0 <HAL_RCC_OscConfig+0x774>)
 8004d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d88:	f7fe ffe6 	bl	8003d58 <HAL_GetTick>
 8004d8c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d90:	f7fe ffe2 	bl	8003d58 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e1b5      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da2:	4b8b      	ldr	r3, [pc, #556]	; (8004fd0 <HAL_RCC_OscConfig+0x774>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d02c      	beq.n	8004e14 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004dba:	4b84      	ldr	r3, [pc, #528]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	497f      	ldr	r1, [pc, #508]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d010      	beq.n	8004e02 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004de0:	4b7a      	ldr	r3, [pc, #488]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	4a79      	ldr	r2, [pc, #484]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004de8:	f043 0304 	orr.w	r3, r3, #4
 8004dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004df0:	4b76      	ldr	r3, [pc, #472]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	4a75      	ldr	r2, [pc, #468]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e00:	e018      	b.n	8004e34 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e02:	4b72      	ldr	r3, [pc, #456]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	4a70      	ldr	r2, [pc, #448]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e12:	e00f      	b.n	8004e34 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e14:	4b6d      	ldr	r3, [pc, #436]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	4a6c      	ldr	r2, [pc, #432]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e24:	4b69      	ldr	r3, [pc, #420]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2a:	4a68      	ldr	r2, [pc, #416]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004e2c:	f023 0304 	bic.w	r3, r3, #4
 8004e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d016      	beq.n	8004e6a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fe ff8c 	bl	8003d58 <HAL_GetTick>
 8004e40:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fe ff88 	bl	8003d58 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e159      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e5a:	4b5c      	ldr	r3, [pc, #368]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0ed      	beq.n	8004e44 <HAL_RCC_OscConfig+0x5e8>
 8004e68:	e01d      	b.n	8004ea6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6a:	f7fe ff75 	bl	8003d58 <HAL_GetTick>
 8004e6e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e70:	e00a      	b.n	8004e88 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e72:	f7fe ff71 	bl	8003d58 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e142      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e88:	4b50      	ldr	r3, [pc, #320]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1ed      	bne.n	8004e72 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004e96:	4b4d      	ldr	r3, [pc, #308]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	4a4b      	ldr	r2, [pc, #300]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d105      	bne.n	8004eba <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eae:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	4a46      	ldr	r2, [pc, #280]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d03c      	beq.n	8004f40 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01c      	beq.n	8004f08 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ece:	4b3f      	ldr	r3, [pc, #252]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ed4:	4a3d      	ldr	r2, [pc, #244]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ede:	f7fe ff3b 	bl	8003d58 <HAL_GetTick>
 8004ee2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ee6:	f7fe ff37 	bl	8003d58 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e10a      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ef8:	4b34      	ldr	r3, [pc, #208]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ef      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x68a>
 8004f06:	e01b      	b.n	8004f40 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f08:	4b30      	ldr	r3, [pc, #192]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f0e:	4a2f      	ldr	r2, [pc, #188]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fe ff1e 	bl	8003d58 <HAL_GetTick>
 8004f1c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f20:	f7fe ff1a 	bl	8003d58 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0ed      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f32:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1ef      	bne.n	8004f20 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80e1 	beq.w	800510c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	f040 80b5 	bne.w	80050be <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f54:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f003 0203 	and.w	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d124      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f72:	3b01      	subs	r3, #1
 8004f74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d11b      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d113      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	3b01      	subs	r3, #1
 8004f98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d109      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	3b01      	subs	r3, #1
 8004fac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d05f      	beq.n	8005072 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	2b0c      	cmp	r3, #12
 8004fb6:	d05a      	beq.n	800506e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a03      	ldr	r2, [pc, #12]	; (8004fcc <HAL_RCC_OscConfig+0x770>)
 8004fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fc2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fc4:	f7fe fec8 	bl	8003d58 <HAL_GetTick>
 8004fc8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fca:	e00c      	b.n	8004fe6 <HAL_RCC_OscConfig+0x78a>
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fe fec0 	bl	8003d58 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e093      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe6:	4b4c      	ldr	r3, [pc, #304]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff2:	4b49      	ldr	r3, [pc, #292]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	4b49      	ldr	r3, [pc, #292]	; (800511c <HAL_RCC_OscConfig+0x8c0>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005002:	3a01      	subs	r2, #1
 8005004:	0112      	lsls	r2, r2, #4
 8005006:	4311      	orrs	r1, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800500c:	0212      	lsls	r2, r2, #8
 800500e:	4311      	orrs	r1, r2
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005014:	0852      	lsrs	r2, r2, #1
 8005016:	3a01      	subs	r2, #1
 8005018:	0552      	lsls	r2, r2, #21
 800501a:	4311      	orrs	r1, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005020:	0852      	lsrs	r2, r2, #1
 8005022:	3a01      	subs	r2, #1
 8005024:	0652      	lsls	r2, r2, #25
 8005026:	430a      	orrs	r2, r1
 8005028:	493b      	ldr	r1, [pc, #236]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800502e:	4b3a      	ldr	r3, [pc, #232]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a39      	ldr	r2, [pc, #228]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 8005034:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005038:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800503a:	4b37      	ldr	r3, [pc, #220]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	4a36      	ldr	r2, [pc, #216]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 8005040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005044:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005046:	f7fe fe87 	bl	8003d58 <HAL_GetTick>
 800504a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800504e:	f7fe fe83 	bl	8003d58 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e056      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005060:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800506c:	e04e      	b.n	800510c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e04d      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005072:	4b29      	ldr	r3, [pc, #164]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d146      	bne.n	800510c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800507e:	4b26      	ldr	r3, [pc, #152]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a25      	ldr	r2, [pc, #148]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 8005084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005088:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800508a:	4b23      	ldr	r3, [pc, #140]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	4a22      	ldr	r2, [pc, #136]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 8005090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005094:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005096:	f7fe fe5f 	bl	8003d58 <HAL_GetTick>
 800509a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509e:	f7fe fe5b 	bl	8003d58 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e02e      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b0:	4b19      	ldr	r3, [pc, #100]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <HAL_RCC_OscConfig+0x842>
 80050bc:	e026      	b.n	800510c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	2b0c      	cmp	r3, #12
 80050c2:	d021      	beq.n	8005108 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c4:	4b14      	ldr	r3, [pc, #80]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a13      	ldr	r2, [pc, #76]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 80050ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fe fe42 	bl	8003d58 <HAL_GetTick>
 80050d4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d8:	f7fe fe3e 	bl	8003d58 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e011      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80050f6:	4b08      	ldr	r3, [pc, #32]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	4a07      	ldr	r2, [pc, #28]	; (8005118 <HAL_RCC_OscConfig+0x8bc>)
 80050fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005100:	f023 0303 	bic.w	r3, r3, #3
 8005104:	60d3      	str	r3, [r2, #12]
 8005106:	e001      	b.n	800510c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3728      	adds	r7, #40	; 0x28
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40021000 	.word	0x40021000
 800511c:	f99f808c 	.word	0xf99f808c

08005120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0e7      	b.n	8005304 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005134:	4b75      	ldr	r3, [pc, #468]	; (800530c <HAL_RCC_ClockConfig+0x1ec>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d910      	bls.n	8005164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b72      	ldr	r3, [pc, #456]	; (800530c <HAL_RCC_ClockConfig+0x1ec>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 0207 	bic.w	r2, r3, #7
 800514a:	4970      	ldr	r1, [pc, #448]	; (800530c <HAL_RCC_ClockConfig+0x1ec>)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	4313      	orrs	r3, r2
 8005150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005152:	4b6e      	ldr	r3, [pc, #440]	; (800530c <HAL_RCC_ClockConfig+0x1ec>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e0cf      	b.n	8005304 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d010      	beq.n	8005192 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	4b66      	ldr	r3, [pc, #408]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800517c:	429a      	cmp	r2, r3
 800517e:	d908      	bls.n	8005192 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005180:	4b63      	ldr	r3, [pc, #396]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4960      	ldr	r1, [pc, #384]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d04c      	beq.n	8005238 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d107      	bne.n	80051b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a6:	4b5a      	ldr	r3, [pc, #360]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d121      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e0a6      	b.n	8005304 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d107      	bne.n	80051ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051be:	4b54      	ldr	r3, [pc, #336]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d115      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e09a      	b.n	8005304 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051d6:	4b4e      	ldr	r3, [pc, #312]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e08e      	b.n	8005304 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e6:	4b4a      	ldr	r3, [pc, #296]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e086      	b.n	8005304 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051f6:	4b46      	ldr	r3, [pc, #280]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f023 0203 	bic.w	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4943      	ldr	r1, [pc, #268]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 8005204:	4313      	orrs	r3, r2
 8005206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005208:	f7fe fda6 	bl	8003d58 <HAL_GetTick>
 800520c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520e:	e00a      	b.n	8005226 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005210:	f7fe fda2 	bl	8003d58 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	; 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e06e      	b.n	8005304 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005226:	4b3a      	ldr	r3, [pc, #232]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 020c 	and.w	r2, r3, #12
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	429a      	cmp	r2, r3
 8005236:	d1eb      	bne.n	8005210 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d010      	beq.n	8005266 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	4b31      	ldr	r3, [pc, #196]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005250:	429a      	cmp	r2, r3
 8005252:	d208      	bcs.n	8005266 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005254:	4b2e      	ldr	r3, [pc, #184]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	492b      	ldr	r1, [pc, #172]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 8005262:	4313      	orrs	r3, r2
 8005264:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005266:	4b29      	ldr	r3, [pc, #164]	; (800530c <HAL_RCC_ClockConfig+0x1ec>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d210      	bcs.n	8005296 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005274:	4b25      	ldr	r3, [pc, #148]	; (800530c <HAL_RCC_ClockConfig+0x1ec>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f023 0207 	bic.w	r2, r3, #7
 800527c:	4923      	ldr	r1, [pc, #140]	; (800530c <HAL_RCC_ClockConfig+0x1ec>)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	4313      	orrs	r3, r2
 8005282:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005284:	4b21      	ldr	r3, [pc, #132]	; (800530c <HAL_RCC_ClockConfig+0x1ec>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d001      	beq.n	8005296 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e036      	b.n	8005304 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a2:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	4918      	ldr	r1, [pc, #96]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c0:	4b13      	ldr	r3, [pc, #76]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4910      	ldr	r1, [pc, #64]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052d4:	f000 f824 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 80052d8:	4602      	mov	r2, r0
 80052da:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	490b      	ldr	r1, [pc, #44]	; (8005314 <HAL_RCC_ClockConfig+0x1f4>)
 80052e6:	5ccb      	ldrb	r3, [r1, r3]
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
 80052f0:	4a09      	ldr	r2, [pc, #36]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 80052f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <HAL_RCC_ClockConfig+0x1fc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7fe fcdd 	bl	8003cb8 <HAL_InitTick>
 80052fe:	4603      	mov	r3, r0
 8005300:	72fb      	strb	r3, [r7, #11]

  return status;
 8005302:	7afb      	ldrb	r3, [r7, #11]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40022000 	.word	0x40022000
 8005310:	40021000 	.word	0x40021000
 8005314:	08007734 	.word	0x08007734
 8005318:	20000000 	.word	0x20000000
 800531c:	20000004 	.word	0x20000004

08005320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005320:	b480      	push	{r7}
 8005322:	b089      	sub	sp, #36	; 0x24
 8005324:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	2300      	movs	r3, #0
 800532c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800532e:	4b3e      	ldr	r3, [pc, #248]	; (8005428 <HAL_RCC_GetSysClockFreq+0x108>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005338:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <HAL_RCC_GetSysClockFreq+0x108>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0x34>
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b0c      	cmp	r3, #12
 800534c:	d121      	bne.n	8005392 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d11e      	bne.n	8005392 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005354:	4b34      	ldr	r3, [pc, #208]	; (8005428 <HAL_RCC_GetSysClockFreq+0x108>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d107      	bne.n	8005370 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005360:	4b31      	ldr	r3, [pc, #196]	; (8005428 <HAL_RCC_GetSysClockFreq+0x108>)
 8005362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e005      	b.n	800537c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005370:	4b2d      	ldr	r3, [pc, #180]	; (8005428 <HAL_RCC_GetSysClockFreq+0x108>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800537c:	4a2b      	ldr	r2, [pc, #172]	; (800542c <HAL_RCC_GetSysClockFreq+0x10c>)
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005384:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10d      	bne.n	80053a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005390:	e00a      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b04      	cmp	r3, #4
 8005396:	d102      	bne.n	800539e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005398:	4b25      	ldr	r3, [pc, #148]	; (8005430 <HAL_RCC_GetSysClockFreq+0x110>)
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	e004      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d101      	bne.n	80053a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053a4:	4b23      	ldr	r3, [pc, #140]	; (8005434 <HAL_RCC_GetSysClockFreq+0x114>)
 80053a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b0c      	cmp	r3, #12
 80053ac:	d134      	bne.n	8005418 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ae:	4b1e      	ldr	r3, [pc, #120]	; (8005428 <HAL_RCC_GetSysClockFreq+0x108>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d003      	beq.n	80053c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d003      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0xac>
 80053c4:	e005      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053c6:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <HAL_RCC_GetSysClockFreq+0x110>)
 80053c8:	617b      	str	r3, [r7, #20]
      break;
 80053ca:	e005      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053cc:	4b19      	ldr	r3, [pc, #100]	; (8005434 <HAL_RCC_GetSysClockFreq+0x114>)
 80053ce:	617b      	str	r3, [r7, #20]
      break;
 80053d0:	e002      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	617b      	str	r3, [r7, #20]
      break;
 80053d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053d8:	4b13      	ldr	r3, [pc, #76]	; (8005428 <HAL_RCC_GetSysClockFreq+0x108>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	3301      	adds	r3, #1
 80053e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053e6:	4b10      	ldr	r3, [pc, #64]	; (8005428 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	fb03 f202 	mul.w	r2, r3, r2
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <HAL_RCC_GetSysClockFreq+0x108>)
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	0e5b      	lsrs	r3, r3, #25
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	3301      	adds	r3, #1
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	fbb2 f3f3 	udiv	r3, r2, r3
 8005416:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005418:	69bb      	ldr	r3, [r7, #24]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3724      	adds	r7, #36	; 0x24
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
 800542c:	0800774c 	.word	0x0800774c
 8005430:	00f42400 	.word	0x00f42400
 8005434:	007a1200 	.word	0x007a1200

08005438 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800543c:	4b03      	ldr	r3, [pc, #12]	; (800544c <HAL_RCC_GetHCLKFreq+0x14>)
 800543e:	681b      	ldr	r3, [r3, #0]
}
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000000 	.word	0x20000000

08005450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005454:	f7ff fff0 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005458:	4602      	mov	r2, r0
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	4904      	ldr	r1, [pc, #16]	; (8005478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005466:	5ccb      	ldrb	r3, [r1, r3]
 8005468:	f003 031f 	and.w	r3, r3, #31
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005470:	4618      	mov	r0, r3
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40021000 	.word	0x40021000
 8005478:	08007744 	.word	0x08007744

0800547c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005480:	f7ff ffda 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005484:	4602      	mov	r2, r0
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	0adb      	lsrs	r3, r3, #11
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	4904      	ldr	r1, [pc, #16]	; (80054a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005492:	5ccb      	ldrb	r3, [r1, r3]
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800549c:	4618      	mov	r0, r3
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40021000 	.word	0x40021000
 80054a4:	08007744 	.word	0x08007744

080054a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054b4:	4b2a      	ldr	r3, [pc, #168]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054c0:	f7ff f968 	bl	8004794 <HAL_PWREx_GetVoltageRange>
 80054c4:	6178      	str	r0, [r7, #20]
 80054c6:	e014      	b.n	80054f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054c8:	4b25      	ldr	r3, [pc, #148]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054cc:	4a24      	ldr	r2, [pc, #144]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d2:	6593      	str	r3, [r2, #88]	; 0x58
 80054d4:	4b22      	ldr	r3, [pc, #136]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054e0:	f7ff f958 	bl	8004794 <HAL_PWREx_GetVoltageRange>
 80054e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054e6:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ea:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f8:	d10b      	bne.n	8005512 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	d919      	bls.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2ba0      	cmp	r3, #160	; 0xa0
 8005504:	d902      	bls.n	800550c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005506:	2302      	movs	r3, #2
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	e013      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800550c:	2301      	movs	r3, #1
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e010      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d902      	bls.n	800551e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005518:	2303      	movs	r3, #3
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	e00a      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b80      	cmp	r3, #128	; 0x80
 8005522:	d102      	bne.n	800552a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005524:	2302      	movs	r3, #2
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	e004      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b70      	cmp	r3, #112	; 0x70
 800552e:	d101      	bne.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005530:	2301      	movs	r3, #1
 8005532:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 0207 	bic.w	r2, r3, #7
 800553c:	4909      	ldr	r1, [pc, #36]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	d001      	beq.n	8005556 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40021000 	.word	0x40021000
 8005564:	40022000 	.word	0x40022000

08005568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005570:	2300      	movs	r3, #0
 8005572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005574:	2300      	movs	r3, #0
 8005576:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 809e 	beq.w	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005586:	2300      	movs	r3, #0
 8005588:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800558a:	4b46      	ldr	r3, [pc, #280]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a0:	4b40      	ldr	r3, [pc, #256]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a4:	4a3f      	ldr	r2, [pc, #252]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055aa:	6593      	str	r3, [r2, #88]	; 0x58
 80055ac:	4b3d      	ldr	r3, [pc, #244]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b8:	2301      	movs	r3, #1
 80055ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055bc:	4b3a      	ldr	r3, [pc, #232]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a39      	ldr	r2, [pc, #228]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80055c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055c8:	f7fe fbc6 	bl	8003d58 <HAL_GetTick>
 80055cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055ce:	e009      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d0:	f7fe fbc2 	bl	8003d58 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d902      	bls.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	74fb      	strb	r3, [r7, #19]
        break;
 80055e2:	e005      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055e4:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0ef      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d15a      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055f6:	4b2b      	ldr	r3, [pc, #172]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005600:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01e      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	429a      	cmp	r2, r3
 8005610:	d019      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005612:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800561e:	4b21      	ldr	r3, [pc, #132]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005624:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800562e:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005634:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800563a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800563e:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d016      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005650:	f7fe fb82 	bl	8003d58 <HAL_GetTick>
 8005654:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005656:	e00b      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005658:	f7fe fb7e 	bl	8003d58 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	f241 3288 	movw	r2, #5000	; 0x1388
 8005666:	4293      	cmp	r3, r2
 8005668:	d902      	bls.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	74fb      	strb	r3, [r7, #19]
            break;
 800566e:	e006      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0ec      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800567e:	7cfb      	ldrb	r3, [r7, #19]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005684:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	4904      	ldr	r1, [pc, #16]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800569a:	e009      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800569c:	7cfb      	ldrb	r3, [r7, #19]
 800569e:	74bb      	strb	r3, [r7, #18]
 80056a0:	e006      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80056a2:	bf00      	nop
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ac:	7cfb      	ldrb	r3, [r7, #19]
 80056ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056b0:	7c7b      	ldrb	r3, [r7, #17]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d105      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b6:	4b6e      	ldr	r3, [pc, #440]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ba:	4a6d      	ldr	r2, [pc, #436]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056ce:	4b68      	ldr	r3, [pc, #416]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d4:	f023 0203 	bic.w	r2, r3, #3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4964      	ldr	r1, [pc, #400]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056f0:	4b5f      	ldr	r3, [pc, #380]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	f023 020c 	bic.w	r2, r3, #12
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	495c      	ldr	r1, [pc, #368]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005712:	4b57      	ldr	r3, [pc, #348]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4953      	ldr	r1, [pc, #332]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005734:	4b4e      	ldr	r3, [pc, #312]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	494b      	ldr	r1, [pc, #300]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005756:	4b46      	ldr	r3, [pc, #280]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	4942      	ldr	r1, [pc, #264]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005778:	4b3d      	ldr	r3, [pc, #244]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	493a      	ldr	r1, [pc, #232]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800579a:	4b35      	ldr	r3, [pc, #212]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	4931      	ldr	r1, [pc, #196]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057bc:	4b2c      	ldr	r3, [pc, #176]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	4929      	ldr	r1, [pc, #164]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057de:	4b24      	ldr	r3, [pc, #144]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	4920      	ldr	r1, [pc, #128]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d015      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005800:	4b1b      	ldr	r3, [pc, #108]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	4918      	ldr	r1, [pc, #96]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800581e:	d105      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005820:	4b13      	ldr	r3, [pc, #76]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4a12      	ldr	r2, [pc, #72]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800582a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d015      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	490a      	ldr	r1, [pc, #40]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005856:	d105      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005858:	4b05      	ldr	r3, [pc, #20]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4a04      	ldr	r2, [pc, #16]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800585e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005862:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005864:	7cbb      	ldrb	r3, [r7, #18]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40021000 	.word	0x40021000

08005874 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a04      	ldr	r2, [pc, #16]	; (8005890 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800587e:	f043 0304 	orr.w	r3, r3, #4
 8005882:	6013      	str	r3, [r2, #0]
}
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40021000 	.word	0x40021000

08005894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e049      	b.n	800593a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fe f8fa 	bl	8003ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f000 f9b4 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d001      	beq.n	800595c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e03b      	b.n	80059d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a19      	ldr	r2, [pc, #100]	; (80059e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d009      	beq.n	8005992 <HAL_TIM_Base_Start_IT+0x4e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005986:	d004      	beq.n	8005992 <HAL_TIM_Base_Start_IT+0x4e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d115      	bne.n	80059be <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <HAL_TIM_Base_Start_IT+0xa4>)
 800599a:	4013      	ands	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b06      	cmp	r3, #6
 80059a2:	d015      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x8c>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059aa:	d011      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059bc:	e008      	b.n	80059d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0201 	orr.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e000      	b.n	80059d2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	40012c00 	.word	0x40012c00
 80059e4:	40014000 	.word	0x40014000
 80059e8:	00010007 	.word	0x00010007

080059ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d020      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01b      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0202 	mvn.w	r2, #2
 8005a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f8e4 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005a3c:	e005      	b.n	8005a4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f8d6 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8e7 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d020      	beq.n	8005a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0204 	mvn.w	r2, #4
 8005a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f8be 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8b0 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f8c1 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d020      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0208 	mvn.w	r2, #8
 8005ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2204      	movs	r2, #4
 8005abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f898 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f88a 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f89b 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0210 	mvn.w	r2, #16
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2208      	movs	r2, #8
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f872 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f864 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f875 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0201 	mvn.w	r2, #1
 8005b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fd fdd2 	bl	80036fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f936 	bl	8005de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f92e 	bl	8005dfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f834 	bl	8005c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00c      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0220 	mvn.w	r2, #32
 8005be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8f6 	bl	8005dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a2a      	ldr	r2, [pc, #168]	; (8005cfc <TIM_Base_SetConfig+0xbc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_Base_SetConfig+0x20>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5e:	d108      	bne.n	8005c72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <TIM_Base_SetConfig+0xbc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00b      	beq.n	8005c92 <TIM_Base_SetConfig+0x52>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c80:	d007      	beq.n	8005c92 <TIM_Base_SetConfig+0x52>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a1e      	ldr	r2, [pc, #120]	; (8005d00 <TIM_Base_SetConfig+0xc0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_Base_SetConfig+0x52>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <TIM_Base_SetConfig+0xc4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d108      	bne.n	8005ca4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a0c      	ldr	r2, [pc, #48]	; (8005cfc <TIM_Base_SetConfig+0xbc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d007      	beq.n	8005ce0 <TIM_Base_SetConfig+0xa0>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a0b      	ldr	r2, [pc, #44]	; (8005d00 <TIM_Base_SetConfig+0xc0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_Base_SetConfig+0xa0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <TIM_Base_SetConfig+0xc4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d103      	bne.n	8005ce8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	615a      	str	r2, [r3, #20]
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400

08005d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e04f      	b.n	8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d108      	bne.n	8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d009      	beq.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d88:	d004      	beq.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a10      	ldr	r2, [pc, #64]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d10c      	bne.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	40012c00 	.word	0x40012c00
 8005dd0:	40014000 	.word	0x40014000

08005dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e040      	b.n	8005ea4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fd fe94 	bl	8003b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2224      	movs	r2, #36	; 0x24
 8005e3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0201 	bic.w	r2, r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fb0c 	bl	8006474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f8af 	bl	8005fc0 <UART_SetConfig>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e01b      	b.n	8005ea4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fb8b 	bl	80065b8 <UART_CheckIdleState>
 8005ea2:	4603      	mov	r3, r0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	; 0x28
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	603b      	str	r3, [r7, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d178      	bne.n	8005fb6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_UART_Transmit+0x24>
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e071      	b.n	8005fb8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2221      	movs	r2, #33	; 0x21
 8005ee0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ee2:	f7fd ff39 	bl	8003d58 <HAL_GetTick>
 8005ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	88fa      	ldrh	r2, [r7, #6]
 8005eec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	d108      	bne.n	8005f14 <HAL_UART_Transmit+0x68>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	e003      	b.n	8005f1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f1c:	e030      	b.n	8005f80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fbed 	bl	8006708 <UART_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e03c      	b.n	8005fb8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10b      	bne.n	8005f5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	881a      	ldrh	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f50:	b292      	uxth	r2, r2
 8005f52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	3302      	adds	r3, #2
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	e008      	b.n	8005f6e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	781a      	ldrb	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	b292      	uxth	r2, r2
 8005f66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1c8      	bne.n	8005f1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2200      	movs	r2, #0
 8005f94:	2140      	movs	r1, #64	; 0x40
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fbb6 	bl	8006708 <UART_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e005      	b.n	8005fb8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e000      	b.n	8005fb8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
  }
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc4:	b08a      	sub	sp, #40	; 0x28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4b9e      	ldr	r3, [pc, #632]	; (8006268 <UART_SetConfig+0x2a8>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	6812      	ldr	r2, [r2, #0]
 8005ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a93      	ldr	r2, [pc, #588]	; (800626c <UART_SetConfig+0x2ac>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006028:	4313      	orrs	r3, r2
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603c:	430a      	orrs	r2, r1
 800603e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a8a      	ldr	r2, [pc, #552]	; (8006270 <UART_SetConfig+0x2b0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d126      	bne.n	8006098 <UART_SetConfig+0xd8>
 800604a:	4b8a      	ldr	r3, [pc, #552]	; (8006274 <UART_SetConfig+0x2b4>)
 800604c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	2b03      	cmp	r3, #3
 8006056:	d81b      	bhi.n	8006090 <UART_SetConfig+0xd0>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0xa0>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006071 	.word	0x08006071
 8006064:	08006081 	.word	0x08006081
 8006068:	08006079 	.word	0x08006079
 800606c:	08006089 	.word	0x08006089
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006076:	e0ab      	b.n	80061d0 <UART_SetConfig+0x210>
 8006078:	2302      	movs	r3, #2
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607e:	e0a7      	b.n	80061d0 <UART_SetConfig+0x210>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006086:	e0a3      	b.n	80061d0 <UART_SetConfig+0x210>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608e:	e09f      	b.n	80061d0 <UART_SetConfig+0x210>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006096:	e09b      	b.n	80061d0 <UART_SetConfig+0x210>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a76      	ldr	r2, [pc, #472]	; (8006278 <UART_SetConfig+0x2b8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d138      	bne.n	8006114 <UART_SetConfig+0x154>
 80060a2:	4b74      	ldr	r3, [pc, #464]	; (8006274 <UART_SetConfig+0x2b4>)
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a8:	f003 030c 	and.w	r3, r3, #12
 80060ac:	2b0c      	cmp	r3, #12
 80060ae:	d82d      	bhi.n	800610c <UART_SetConfig+0x14c>
 80060b0:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <UART_SetConfig+0xf8>)
 80060b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b6:	bf00      	nop
 80060b8:	080060ed 	.word	0x080060ed
 80060bc:	0800610d 	.word	0x0800610d
 80060c0:	0800610d 	.word	0x0800610d
 80060c4:	0800610d 	.word	0x0800610d
 80060c8:	080060fd 	.word	0x080060fd
 80060cc:	0800610d 	.word	0x0800610d
 80060d0:	0800610d 	.word	0x0800610d
 80060d4:	0800610d 	.word	0x0800610d
 80060d8:	080060f5 	.word	0x080060f5
 80060dc:	0800610d 	.word	0x0800610d
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	0800610d 	.word	0x0800610d
 80060e8:	08006105 	.word	0x08006105
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060f2:	e06d      	b.n	80061d0 <UART_SetConfig+0x210>
 80060f4:	2302      	movs	r3, #2
 80060f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060fa:	e069      	b.n	80061d0 <UART_SetConfig+0x210>
 80060fc:	2304      	movs	r3, #4
 80060fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006102:	e065      	b.n	80061d0 <UART_SetConfig+0x210>
 8006104:	2308      	movs	r3, #8
 8006106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800610a:	e061      	b.n	80061d0 <UART_SetConfig+0x210>
 800610c:	2310      	movs	r3, #16
 800610e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006112:	e05d      	b.n	80061d0 <UART_SetConfig+0x210>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a58      	ldr	r2, [pc, #352]	; (800627c <UART_SetConfig+0x2bc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d125      	bne.n	800616a <UART_SetConfig+0x1aa>
 800611e:	4b55      	ldr	r3, [pc, #340]	; (8006274 <UART_SetConfig+0x2b4>)
 8006120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006124:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006128:	2b30      	cmp	r3, #48	; 0x30
 800612a:	d016      	beq.n	800615a <UART_SetConfig+0x19a>
 800612c:	2b30      	cmp	r3, #48	; 0x30
 800612e:	d818      	bhi.n	8006162 <UART_SetConfig+0x1a2>
 8006130:	2b20      	cmp	r3, #32
 8006132:	d00a      	beq.n	800614a <UART_SetConfig+0x18a>
 8006134:	2b20      	cmp	r3, #32
 8006136:	d814      	bhi.n	8006162 <UART_SetConfig+0x1a2>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <UART_SetConfig+0x182>
 800613c:	2b10      	cmp	r3, #16
 800613e:	d008      	beq.n	8006152 <UART_SetConfig+0x192>
 8006140:	e00f      	b.n	8006162 <UART_SetConfig+0x1a2>
 8006142:	2300      	movs	r3, #0
 8006144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006148:	e042      	b.n	80061d0 <UART_SetConfig+0x210>
 800614a:	2302      	movs	r3, #2
 800614c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006150:	e03e      	b.n	80061d0 <UART_SetConfig+0x210>
 8006152:	2304      	movs	r3, #4
 8006154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006158:	e03a      	b.n	80061d0 <UART_SetConfig+0x210>
 800615a:	2308      	movs	r3, #8
 800615c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006160:	e036      	b.n	80061d0 <UART_SetConfig+0x210>
 8006162:	2310      	movs	r3, #16
 8006164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006168:	e032      	b.n	80061d0 <UART_SetConfig+0x210>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a3f      	ldr	r2, [pc, #252]	; (800626c <UART_SetConfig+0x2ac>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d12a      	bne.n	80061ca <UART_SetConfig+0x20a>
 8006174:	4b3f      	ldr	r3, [pc, #252]	; (8006274 <UART_SetConfig+0x2b4>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800617e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006182:	d01a      	beq.n	80061ba <UART_SetConfig+0x1fa>
 8006184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006188:	d81b      	bhi.n	80061c2 <UART_SetConfig+0x202>
 800618a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800618e:	d00c      	beq.n	80061aa <UART_SetConfig+0x1ea>
 8006190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006194:	d815      	bhi.n	80061c2 <UART_SetConfig+0x202>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <UART_SetConfig+0x1e2>
 800619a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619e:	d008      	beq.n	80061b2 <UART_SetConfig+0x1f2>
 80061a0:	e00f      	b.n	80061c2 <UART_SetConfig+0x202>
 80061a2:	2300      	movs	r3, #0
 80061a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a8:	e012      	b.n	80061d0 <UART_SetConfig+0x210>
 80061aa:	2302      	movs	r3, #2
 80061ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b0:	e00e      	b.n	80061d0 <UART_SetConfig+0x210>
 80061b2:	2304      	movs	r3, #4
 80061b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b8:	e00a      	b.n	80061d0 <UART_SetConfig+0x210>
 80061ba:	2308      	movs	r3, #8
 80061bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061c0:	e006      	b.n	80061d0 <UART_SetConfig+0x210>
 80061c2:	2310      	movs	r3, #16
 80061c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061c8:	e002      	b.n	80061d0 <UART_SetConfig+0x210>
 80061ca:	2310      	movs	r3, #16
 80061cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a25      	ldr	r2, [pc, #148]	; (800626c <UART_SetConfig+0x2ac>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	f040 808a 	bne.w	80062f0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d824      	bhi.n	800622e <UART_SetConfig+0x26e>
 80061e4:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <UART_SetConfig+0x22c>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	08006211 	.word	0x08006211
 80061f0:	0800622f 	.word	0x0800622f
 80061f4:	08006219 	.word	0x08006219
 80061f8:	0800622f 	.word	0x0800622f
 80061fc:	0800621f 	.word	0x0800621f
 8006200:	0800622f 	.word	0x0800622f
 8006204:	0800622f 	.word	0x0800622f
 8006208:	0800622f 	.word	0x0800622f
 800620c:	08006227 	.word	0x08006227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006210:	f7ff f91e 	bl	8005450 <HAL_RCC_GetPCLK1Freq>
 8006214:	61f8      	str	r0, [r7, #28]
        break;
 8006216:	e010      	b.n	800623a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006218:	4b19      	ldr	r3, [pc, #100]	; (8006280 <UART_SetConfig+0x2c0>)
 800621a:	61fb      	str	r3, [r7, #28]
        break;
 800621c:	e00d      	b.n	800623a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800621e:	f7ff f87f 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 8006222:	61f8      	str	r0, [r7, #28]
        break;
 8006224:	e009      	b.n	800623a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800622a:	61fb      	str	r3, [r7, #28]
        break;
 800622c:	e005      	b.n	800623a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006238:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8109 	beq.w	8006454 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	4413      	add	r3, r2
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	429a      	cmp	r2, r3
 8006250:	d305      	bcc.n	800625e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	429a      	cmp	r2, r3
 800625c:	d912      	bls.n	8006284 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006264:	e0f6      	b.n	8006454 <UART_SetConfig+0x494>
 8006266:	bf00      	nop
 8006268:	efff69f3 	.word	0xefff69f3
 800626c:	40008000 	.word	0x40008000
 8006270:	40013800 	.word	0x40013800
 8006274:	40021000 	.word	0x40021000
 8006278:	40004400 	.word	0x40004400
 800627c:	40004800 	.word	0x40004800
 8006280:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	2200      	movs	r2, #0
 8006288:	461c      	mov	r4, r3
 800628a:	4615      	mov	r5, r2
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	022b      	lsls	r3, r5, #8
 8006296:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800629a:	0222      	lsls	r2, r4, #8
 800629c:	68f9      	ldr	r1, [r7, #12]
 800629e:	6849      	ldr	r1, [r1, #4]
 80062a0:	0849      	lsrs	r1, r1, #1
 80062a2:	2000      	movs	r0, #0
 80062a4:	4688      	mov	r8, r1
 80062a6:	4681      	mov	r9, r0
 80062a8:	eb12 0a08 	adds.w	sl, r2, r8
 80062ac:	eb43 0b09 	adc.w	fp, r3, r9
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062be:	4650      	mov	r0, sl
 80062c0:	4659      	mov	r1, fp
 80062c2:	f7fc ffd5 	bl	8003270 <__aeabi_uldivmod>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4613      	mov	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d4:	d308      	bcc.n	80062e8 <UART_SetConfig+0x328>
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062dc:	d204      	bcs.n	80062e8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	e0b5      	b.n	8006454 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062ee:	e0b1      	b.n	8006454 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f8:	d15d      	bne.n	80063b6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80062fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d827      	bhi.n	8006352 <UART_SetConfig+0x392>
 8006302:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <UART_SetConfig+0x348>)
 8006304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006308:	0800632d 	.word	0x0800632d
 800630c:	08006335 	.word	0x08006335
 8006310:	0800633d 	.word	0x0800633d
 8006314:	08006353 	.word	0x08006353
 8006318:	08006343 	.word	0x08006343
 800631c:	08006353 	.word	0x08006353
 8006320:	08006353 	.word	0x08006353
 8006324:	08006353 	.word	0x08006353
 8006328:	0800634b 	.word	0x0800634b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800632c:	f7ff f890 	bl	8005450 <HAL_RCC_GetPCLK1Freq>
 8006330:	61f8      	str	r0, [r7, #28]
        break;
 8006332:	e014      	b.n	800635e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006334:	f7ff f8a2 	bl	800547c <HAL_RCC_GetPCLK2Freq>
 8006338:	61f8      	str	r0, [r7, #28]
        break;
 800633a:	e010      	b.n	800635e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800633c:	4b4c      	ldr	r3, [pc, #304]	; (8006470 <UART_SetConfig+0x4b0>)
 800633e:	61fb      	str	r3, [r7, #28]
        break;
 8006340:	e00d      	b.n	800635e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006342:	f7fe ffed 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 8006346:	61f8      	str	r0, [r7, #28]
        break;
 8006348:	e009      	b.n	800635e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800634a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634e:	61fb      	str	r3, [r7, #28]
        break;
 8006350:	e005      	b.n	800635e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800635c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d077      	beq.n	8006454 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	005a      	lsls	r2, r3, #1
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	441a      	add	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b0f      	cmp	r3, #15
 800637e:	d916      	bls.n	80063ae <UART_SetConfig+0x3ee>
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006386:	d212      	bcs.n	80063ae <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f023 030f 	bic.w	r3, r3, #15
 8006390:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	085b      	lsrs	r3, r3, #1
 8006396:	b29b      	uxth	r3, r3
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	b29a      	uxth	r2, r3
 800639e:	8afb      	ldrh	r3, [r7, #22]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	8afa      	ldrh	r2, [r7, #22]
 80063aa:	60da      	str	r2, [r3, #12]
 80063ac:	e052      	b.n	8006454 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063b4:	e04e      	b.n	8006454 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d827      	bhi.n	800640e <UART_SetConfig+0x44e>
 80063be:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <UART_SetConfig+0x404>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	080063e9 	.word	0x080063e9
 80063c8:	080063f1 	.word	0x080063f1
 80063cc:	080063f9 	.word	0x080063f9
 80063d0:	0800640f 	.word	0x0800640f
 80063d4:	080063ff 	.word	0x080063ff
 80063d8:	0800640f 	.word	0x0800640f
 80063dc:	0800640f 	.word	0x0800640f
 80063e0:	0800640f 	.word	0x0800640f
 80063e4:	08006407 	.word	0x08006407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e8:	f7ff f832 	bl	8005450 <HAL_RCC_GetPCLK1Freq>
 80063ec:	61f8      	str	r0, [r7, #28]
        break;
 80063ee:	e014      	b.n	800641a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f0:	f7ff f844 	bl	800547c <HAL_RCC_GetPCLK2Freq>
 80063f4:	61f8      	str	r0, [r7, #28]
        break;
 80063f6:	e010      	b.n	800641a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063f8:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <UART_SetConfig+0x4b0>)
 80063fa:	61fb      	str	r3, [r7, #28]
        break;
 80063fc:	e00d      	b.n	800641a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063fe:	f7fe ff8f 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 8006402:	61f8      	str	r0, [r7, #28]
        break;
 8006404:	e009      	b.n	800641a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640a:	61fb      	str	r3, [r7, #28]
        break;
 800640c:	e005      	b.n	800641a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006418:	bf00      	nop
    }

    if (pclk != 0U)
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d019      	beq.n	8006454 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	085a      	lsrs	r2, r3, #1
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	441a      	add	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006432:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b0f      	cmp	r3, #15
 8006438:	d909      	bls.n	800644e <UART_SetConfig+0x48e>
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006440:	d205      	bcs.n	800644e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60da      	str	r2, [r3, #12]
 800644c:	e002      	b.n	8006454 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006460:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006464:	4618      	mov	r0, r3
 8006466:	3728      	adds	r7, #40	; 0x28
 8006468:	46bd      	mov	sp, r7
 800646a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800646e:	bf00      	nop
 8006470:	00f42400 	.word	0x00f42400

08006474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01a      	beq.n	800658a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006572:	d10a      	bne.n	800658a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	605a      	str	r2, [r3, #4]
  }
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b098      	sub	sp, #96	; 0x60
 80065bc:	af02      	add	r7, sp, #8
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065c8:	f7fd fbc6 	bl	8003d58 <HAL_GetTick>
 80065cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d12e      	bne.n	800663a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e4:	2200      	movs	r2, #0
 80065e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f88c 	bl	8006708 <UART_WaitOnFlagUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d021      	beq.n	800663a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660a:	653b      	str	r3, [r7, #80]	; 0x50
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006614:	647b      	str	r3, [r7, #68]	; 0x44
 8006616:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800661a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e6      	bne.n	80065f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e062      	b.n	8006700 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b04      	cmp	r3, #4
 8006646:	d149      	bne.n	80066dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006650:	2200      	movs	r2, #0
 8006652:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f856 	bl	8006708 <UART_WaitOnFlagUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d03c      	beq.n	80066dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	623b      	str	r3, [r7, #32]
   return(result);
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006680:	633b      	str	r3, [r7, #48]	; 0x30
 8006682:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e6      	bne.n	8006662 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3308      	adds	r3, #8
 800669a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0301 	bic.w	r3, r3, #1
 80066aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3308      	adds	r3, #8
 80066b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066b4:	61fa      	str	r2, [r7, #28]
 80066b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	69b9      	ldr	r1, [r7, #24]
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	617b      	str	r3, [r7, #20]
   return(result);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e5      	bne.n	8006694 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e011      	b.n	8006700 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3758      	adds	r7, #88	; 0x58
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	4613      	mov	r3, r2
 8006716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006718:	e049      	b.n	80067ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006720:	d045      	beq.n	80067ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006722:	f7fd fb19 	bl	8003d58 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	429a      	cmp	r2, r3
 8006730:	d302      	bcc.n	8006738 <UART_WaitOnFlagUntilTimeout+0x30>
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e048      	b.n	80067ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	d031      	beq.n	80067ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b08      	cmp	r3, #8
 8006756:	d110      	bne.n	800677a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2208      	movs	r2, #8
 800675e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f838 	bl	80067d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2208      	movs	r2, #8
 800676a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e029      	b.n	80067ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006788:	d111      	bne.n	80067ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f81e 	bl	80067d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e00f      	b.n	80067ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69da      	ldr	r2, [r3, #28]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4013      	ands	r3, r2
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	bf0c      	ite	eq
 80067be:	2301      	moveq	r3, #1
 80067c0:	2300      	movne	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d0a6      	beq.n	800671a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b095      	sub	sp, #84	; 0x54
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fc:	643b      	str	r3, [r7, #64]	; 0x40
 80067fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e6      	bne.n	80067de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3308      	adds	r3, #8
 8006816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f023 0301 	bic.w	r3, r3, #1
 8006826:	64bb      	str	r3, [r7, #72]	; 0x48
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3308      	adds	r3, #8
 800682e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006832:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e5      	bne.n	8006810 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006848:	2b01      	cmp	r3, #1
 800684a:	d118      	bne.n	800687e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	60bb      	str	r3, [r7, #8]
   return(result);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f023 0310 	bic.w	r3, r3, #16
 8006860:	647b      	str	r3, [r7, #68]	; 0x44
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6979      	ldr	r1, [r7, #20]
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	613b      	str	r3, [r7, #16]
   return(result);
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e6      	bne.n	800684c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006892:	bf00      	nop
 8006894:	3754      	adds	r7, #84	; 0x54
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <std>:
 80068a0:	2300      	movs	r3, #0
 80068a2:	b510      	push	{r4, lr}
 80068a4:	4604      	mov	r4, r0
 80068a6:	e9c0 3300 	strd	r3, r3, [r0]
 80068aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ae:	6083      	str	r3, [r0, #8]
 80068b0:	8181      	strh	r1, [r0, #12]
 80068b2:	6643      	str	r3, [r0, #100]	; 0x64
 80068b4:	81c2      	strh	r2, [r0, #14]
 80068b6:	6183      	str	r3, [r0, #24]
 80068b8:	4619      	mov	r1, r3
 80068ba:	2208      	movs	r2, #8
 80068bc:	305c      	adds	r0, #92	; 0x5c
 80068be:	f000 f906 	bl	8006ace <memset>
 80068c2:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <std+0x58>)
 80068c4:	6263      	str	r3, [r4, #36]	; 0x24
 80068c6:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <std+0x5c>)
 80068c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80068ca:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <std+0x60>)
 80068cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <std+0x64>)
 80068d0:	6323      	str	r3, [r4, #48]	; 0x30
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <std+0x68>)
 80068d4:	6224      	str	r4, [r4, #32]
 80068d6:	429c      	cmp	r4, r3
 80068d8:	d006      	beq.n	80068e8 <std+0x48>
 80068da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80068de:	4294      	cmp	r4, r2
 80068e0:	d002      	beq.n	80068e8 <std+0x48>
 80068e2:	33d0      	adds	r3, #208	; 0xd0
 80068e4:	429c      	cmp	r4, r3
 80068e6:	d105      	bne.n	80068f4 <std+0x54>
 80068e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f0:	f000 b966 	b.w	8006bc0 <__retarget_lock_init_recursive>
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	bf00      	nop
 80068f8:	08006a49 	.word	0x08006a49
 80068fc:	08006a6b 	.word	0x08006a6b
 8006900:	08006aa3 	.word	0x08006aa3
 8006904:	08006ac7 	.word	0x08006ac7
 8006908:	20000190 	.word	0x20000190

0800690c <stdio_exit_handler>:
 800690c:	4a02      	ldr	r2, [pc, #8]	; (8006918 <stdio_exit_handler+0xc>)
 800690e:	4903      	ldr	r1, [pc, #12]	; (800691c <stdio_exit_handler+0x10>)
 8006910:	4803      	ldr	r0, [pc, #12]	; (8006920 <stdio_exit_handler+0x14>)
 8006912:	f000 b869 	b.w	80069e8 <_fwalk_sglue>
 8006916:	bf00      	nop
 8006918:	2000002c 	.word	0x2000002c
 800691c:	0800746d 	.word	0x0800746d
 8006920:	20000038 	.word	0x20000038

08006924 <cleanup_stdio>:
 8006924:	6841      	ldr	r1, [r0, #4]
 8006926:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <cleanup_stdio+0x34>)
 8006928:	4299      	cmp	r1, r3
 800692a:	b510      	push	{r4, lr}
 800692c:	4604      	mov	r4, r0
 800692e:	d001      	beq.n	8006934 <cleanup_stdio+0x10>
 8006930:	f000 fd9c 	bl	800746c <_fflush_r>
 8006934:	68a1      	ldr	r1, [r4, #8]
 8006936:	4b09      	ldr	r3, [pc, #36]	; (800695c <cleanup_stdio+0x38>)
 8006938:	4299      	cmp	r1, r3
 800693a:	d002      	beq.n	8006942 <cleanup_stdio+0x1e>
 800693c:	4620      	mov	r0, r4
 800693e:	f000 fd95 	bl	800746c <_fflush_r>
 8006942:	68e1      	ldr	r1, [r4, #12]
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <cleanup_stdio+0x3c>)
 8006946:	4299      	cmp	r1, r3
 8006948:	d004      	beq.n	8006954 <cleanup_stdio+0x30>
 800694a:	4620      	mov	r0, r4
 800694c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006950:	f000 bd8c 	b.w	800746c <_fflush_r>
 8006954:	bd10      	pop	{r4, pc}
 8006956:	bf00      	nop
 8006958:	20000190 	.word	0x20000190
 800695c:	200001f8 	.word	0x200001f8
 8006960:	20000260 	.word	0x20000260

08006964 <global_stdio_init.part.0>:
 8006964:	b510      	push	{r4, lr}
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <global_stdio_init.part.0+0x30>)
 8006968:	4c0b      	ldr	r4, [pc, #44]	; (8006998 <global_stdio_init.part.0+0x34>)
 800696a:	4a0c      	ldr	r2, [pc, #48]	; (800699c <global_stdio_init.part.0+0x38>)
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	4620      	mov	r0, r4
 8006970:	2200      	movs	r2, #0
 8006972:	2104      	movs	r1, #4
 8006974:	f7ff ff94 	bl	80068a0 <std>
 8006978:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800697c:	2201      	movs	r2, #1
 800697e:	2109      	movs	r1, #9
 8006980:	f7ff ff8e 	bl	80068a0 <std>
 8006984:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006988:	2202      	movs	r2, #2
 800698a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800698e:	2112      	movs	r1, #18
 8006990:	f7ff bf86 	b.w	80068a0 <std>
 8006994:	200002c8 	.word	0x200002c8
 8006998:	20000190 	.word	0x20000190
 800699c:	0800690d 	.word	0x0800690d

080069a0 <__sfp_lock_acquire>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__sfp_lock_acquire+0x8>)
 80069a2:	f000 b90e 	b.w	8006bc2 <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	200002d1 	.word	0x200002d1

080069ac <__sfp_lock_release>:
 80069ac:	4801      	ldr	r0, [pc, #4]	; (80069b4 <__sfp_lock_release+0x8>)
 80069ae:	f000 b909 	b.w	8006bc4 <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	200002d1 	.word	0x200002d1

080069b8 <__sinit>:
 80069b8:	b510      	push	{r4, lr}
 80069ba:	4604      	mov	r4, r0
 80069bc:	f7ff fff0 	bl	80069a0 <__sfp_lock_acquire>
 80069c0:	6a23      	ldr	r3, [r4, #32]
 80069c2:	b11b      	cbz	r3, 80069cc <__sinit+0x14>
 80069c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c8:	f7ff bff0 	b.w	80069ac <__sfp_lock_release>
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <__sinit+0x28>)
 80069ce:	6223      	str	r3, [r4, #32]
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <__sinit+0x2c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1f5      	bne.n	80069c4 <__sinit+0xc>
 80069d8:	f7ff ffc4 	bl	8006964 <global_stdio_init.part.0>
 80069dc:	e7f2      	b.n	80069c4 <__sinit+0xc>
 80069de:	bf00      	nop
 80069e0:	08006925 	.word	0x08006925
 80069e4:	200002c8 	.word	0x200002c8

080069e8 <_fwalk_sglue>:
 80069e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ec:	4607      	mov	r7, r0
 80069ee:	4688      	mov	r8, r1
 80069f0:	4614      	mov	r4, r2
 80069f2:	2600      	movs	r6, #0
 80069f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069f8:	f1b9 0901 	subs.w	r9, r9, #1
 80069fc:	d505      	bpl.n	8006a0a <_fwalk_sglue+0x22>
 80069fe:	6824      	ldr	r4, [r4, #0]
 8006a00:	2c00      	cmp	r4, #0
 8006a02:	d1f7      	bne.n	80069f4 <_fwalk_sglue+0xc>
 8006a04:	4630      	mov	r0, r6
 8006a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0a:	89ab      	ldrh	r3, [r5, #12]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d907      	bls.n	8006a20 <_fwalk_sglue+0x38>
 8006a10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a14:	3301      	adds	r3, #1
 8006a16:	d003      	beq.n	8006a20 <_fwalk_sglue+0x38>
 8006a18:	4629      	mov	r1, r5
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	47c0      	blx	r8
 8006a1e:	4306      	orrs	r6, r0
 8006a20:	3568      	adds	r5, #104	; 0x68
 8006a22:	e7e9      	b.n	80069f8 <_fwalk_sglue+0x10>

08006a24 <iprintf>:
 8006a24:	b40f      	push	{r0, r1, r2, r3}
 8006a26:	b507      	push	{r0, r1, r2, lr}
 8006a28:	4906      	ldr	r1, [pc, #24]	; (8006a44 <iprintf+0x20>)
 8006a2a:	ab04      	add	r3, sp, #16
 8006a2c:	6808      	ldr	r0, [r1, #0]
 8006a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a32:	6881      	ldr	r1, [r0, #8]
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	f000 f9e9 	bl	8006e0c <_vfiprintf_r>
 8006a3a:	b003      	add	sp, #12
 8006a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a40:	b004      	add	sp, #16
 8006a42:	4770      	bx	lr
 8006a44:	20000084 	.word	0x20000084

08006a48 <__sread>:
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a50:	f000 f868 	bl	8006b24 <_read_r>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	bfab      	itete	ge
 8006a58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a5c:	181b      	addge	r3, r3, r0
 8006a5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a62:	bfac      	ite	ge
 8006a64:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a66:	81a3      	strhlt	r3, [r4, #12]
 8006a68:	bd10      	pop	{r4, pc}

08006a6a <__swrite>:
 8006a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6e:	461f      	mov	r7, r3
 8006a70:	898b      	ldrh	r3, [r1, #12]
 8006a72:	05db      	lsls	r3, r3, #23
 8006a74:	4605      	mov	r5, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	4616      	mov	r6, r2
 8006a7a:	d505      	bpl.n	8006a88 <__swrite+0x1e>
 8006a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a80:	2302      	movs	r3, #2
 8006a82:	2200      	movs	r2, #0
 8006a84:	f000 f83c 	bl	8006b00 <_lseek_r>
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a92:	81a3      	strh	r3, [r4, #12]
 8006a94:	4632      	mov	r2, r6
 8006a96:	463b      	mov	r3, r7
 8006a98:	4628      	mov	r0, r5
 8006a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9e:	f000 b853 	b.w	8006b48 <_write_r>

08006aa2 <__sseek>:
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aaa:	f000 f829 	bl	8006b00 <_lseek_r>
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	bf15      	itete	ne
 8006ab4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006abe:	81a3      	strheq	r3, [r4, #12]
 8006ac0:	bf18      	it	ne
 8006ac2:	81a3      	strhne	r3, [r4, #12]
 8006ac4:	bd10      	pop	{r4, pc}

08006ac6 <__sclose>:
 8006ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aca:	f000 b809 	b.w	8006ae0 <_close_r>

08006ace <memset>:
 8006ace:	4402      	add	r2, r0
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d100      	bne.n	8006ad8 <memset+0xa>
 8006ad6:	4770      	bx	lr
 8006ad8:	f803 1b01 	strb.w	r1, [r3], #1
 8006adc:	e7f9      	b.n	8006ad2 <memset+0x4>
	...

08006ae0 <_close_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d06      	ldr	r5, [pc, #24]	; (8006afc <_close_r+0x1c>)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4608      	mov	r0, r1
 8006aea:	602b      	str	r3, [r5, #0]
 8006aec:	f7fc ff2d 	bl	800394a <_close>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d102      	bne.n	8006afa <_close_r+0x1a>
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	b103      	cbz	r3, 8006afa <_close_r+0x1a>
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	200002cc 	.word	0x200002cc

08006b00 <_lseek_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4d07      	ldr	r5, [pc, #28]	; (8006b20 <_lseek_r+0x20>)
 8006b04:	4604      	mov	r4, r0
 8006b06:	4608      	mov	r0, r1
 8006b08:	4611      	mov	r1, r2
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	602a      	str	r2, [r5, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f7fc ff42 	bl	8003998 <_lseek>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_lseek_r+0x1e>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_lseek_r+0x1e>
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	200002cc 	.word	0x200002cc

08006b24 <_read_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d07      	ldr	r5, [pc, #28]	; (8006b44 <_read_r+0x20>)
 8006b28:	4604      	mov	r4, r0
 8006b2a:	4608      	mov	r0, r1
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	602a      	str	r2, [r5, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f7fc fed0 	bl	80038d8 <_read>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_read_r+0x1e>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_read_r+0x1e>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	200002cc 	.word	0x200002cc

08006b48 <_write_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d07      	ldr	r5, [pc, #28]	; (8006b68 <_write_r+0x20>)
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	4608      	mov	r0, r1
 8006b50:	4611      	mov	r1, r2
 8006b52:	2200      	movs	r2, #0
 8006b54:	602a      	str	r2, [r5, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f7fc fedb 	bl	8003912 <_write>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d102      	bne.n	8006b66 <_write_r+0x1e>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	b103      	cbz	r3, 8006b66 <_write_r+0x1e>
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	200002cc 	.word	0x200002cc

08006b6c <__errno>:
 8006b6c:	4b01      	ldr	r3, [pc, #4]	; (8006b74 <__errno+0x8>)
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20000084 	.word	0x20000084

08006b78 <__libc_init_array>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4d0d      	ldr	r5, [pc, #52]	; (8006bb0 <__libc_init_array+0x38>)
 8006b7c:	4c0d      	ldr	r4, [pc, #52]	; (8006bb4 <__libc_init_array+0x3c>)
 8006b7e:	1b64      	subs	r4, r4, r5
 8006b80:	10a4      	asrs	r4, r4, #2
 8006b82:	2600      	movs	r6, #0
 8006b84:	42a6      	cmp	r6, r4
 8006b86:	d109      	bne.n	8006b9c <__libc_init_array+0x24>
 8006b88:	4d0b      	ldr	r5, [pc, #44]	; (8006bb8 <__libc_init_array+0x40>)
 8006b8a:	4c0c      	ldr	r4, [pc, #48]	; (8006bbc <__libc_init_array+0x44>)
 8006b8c:	f000 fdc0 	bl	8007710 <_init>
 8006b90:	1b64      	subs	r4, r4, r5
 8006b92:	10a4      	asrs	r4, r4, #2
 8006b94:	2600      	movs	r6, #0
 8006b96:	42a6      	cmp	r6, r4
 8006b98:	d105      	bne.n	8006ba6 <__libc_init_array+0x2e>
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba0:	4798      	blx	r3
 8006ba2:	3601      	adds	r6, #1
 8006ba4:	e7ee      	b.n	8006b84 <__libc_init_array+0xc>
 8006ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006baa:	4798      	blx	r3
 8006bac:	3601      	adds	r6, #1
 8006bae:	e7f2      	b.n	8006b96 <__libc_init_array+0x1e>
 8006bb0:	080077b8 	.word	0x080077b8
 8006bb4:	080077b8 	.word	0x080077b8
 8006bb8:	080077b8 	.word	0x080077b8
 8006bbc:	080077bc 	.word	0x080077bc

08006bc0 <__retarget_lock_init_recursive>:
 8006bc0:	4770      	bx	lr

08006bc2 <__retarget_lock_acquire_recursive>:
 8006bc2:	4770      	bx	lr

08006bc4 <__retarget_lock_release_recursive>:
 8006bc4:	4770      	bx	lr
	...

08006bc8 <_free_r>:
 8006bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bca:	2900      	cmp	r1, #0
 8006bcc:	d044      	beq.n	8006c58 <_free_r+0x90>
 8006bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd2:	9001      	str	r0, [sp, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f1a1 0404 	sub.w	r4, r1, #4
 8006bda:	bfb8      	it	lt
 8006bdc:	18e4      	addlt	r4, r4, r3
 8006bde:	f000 f8df 	bl	8006da0 <__malloc_lock>
 8006be2:	4a1e      	ldr	r2, [pc, #120]	; (8006c5c <_free_r+0x94>)
 8006be4:	9801      	ldr	r0, [sp, #4]
 8006be6:	6813      	ldr	r3, [r2, #0]
 8006be8:	b933      	cbnz	r3, 8006bf8 <_free_r+0x30>
 8006bea:	6063      	str	r3, [r4, #4]
 8006bec:	6014      	str	r4, [r2, #0]
 8006bee:	b003      	add	sp, #12
 8006bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bf4:	f000 b8da 	b.w	8006dac <__malloc_unlock>
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d908      	bls.n	8006c0e <_free_r+0x46>
 8006bfc:	6825      	ldr	r5, [r4, #0]
 8006bfe:	1961      	adds	r1, r4, r5
 8006c00:	428b      	cmp	r3, r1
 8006c02:	bf01      	itttt	eq
 8006c04:	6819      	ldreq	r1, [r3, #0]
 8006c06:	685b      	ldreq	r3, [r3, #4]
 8006c08:	1949      	addeq	r1, r1, r5
 8006c0a:	6021      	streq	r1, [r4, #0]
 8006c0c:	e7ed      	b.n	8006bea <_free_r+0x22>
 8006c0e:	461a      	mov	r2, r3
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	b10b      	cbz	r3, 8006c18 <_free_r+0x50>
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	d9fa      	bls.n	8006c0e <_free_r+0x46>
 8006c18:	6811      	ldr	r1, [r2, #0]
 8006c1a:	1855      	adds	r5, r2, r1
 8006c1c:	42a5      	cmp	r5, r4
 8006c1e:	d10b      	bne.n	8006c38 <_free_r+0x70>
 8006c20:	6824      	ldr	r4, [r4, #0]
 8006c22:	4421      	add	r1, r4
 8006c24:	1854      	adds	r4, r2, r1
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	6011      	str	r1, [r2, #0]
 8006c2a:	d1e0      	bne.n	8006bee <_free_r+0x26>
 8006c2c:	681c      	ldr	r4, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	6053      	str	r3, [r2, #4]
 8006c32:	440c      	add	r4, r1
 8006c34:	6014      	str	r4, [r2, #0]
 8006c36:	e7da      	b.n	8006bee <_free_r+0x26>
 8006c38:	d902      	bls.n	8006c40 <_free_r+0x78>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	6003      	str	r3, [r0, #0]
 8006c3e:	e7d6      	b.n	8006bee <_free_r+0x26>
 8006c40:	6825      	ldr	r5, [r4, #0]
 8006c42:	1961      	adds	r1, r4, r5
 8006c44:	428b      	cmp	r3, r1
 8006c46:	bf04      	itt	eq
 8006c48:	6819      	ldreq	r1, [r3, #0]
 8006c4a:	685b      	ldreq	r3, [r3, #4]
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	bf04      	itt	eq
 8006c50:	1949      	addeq	r1, r1, r5
 8006c52:	6021      	streq	r1, [r4, #0]
 8006c54:	6054      	str	r4, [r2, #4]
 8006c56:	e7ca      	b.n	8006bee <_free_r+0x26>
 8006c58:	b003      	add	sp, #12
 8006c5a:	bd30      	pop	{r4, r5, pc}
 8006c5c:	200002d4 	.word	0x200002d4

08006c60 <sbrk_aligned>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	4e0e      	ldr	r6, [pc, #56]	; (8006c9c <sbrk_aligned+0x3c>)
 8006c64:	460c      	mov	r4, r1
 8006c66:	6831      	ldr	r1, [r6, #0]
 8006c68:	4605      	mov	r5, r0
 8006c6a:	b911      	cbnz	r1, 8006c72 <sbrk_aligned+0x12>
 8006c6c:	f000 fcbc 	bl	80075e8 <_sbrk_r>
 8006c70:	6030      	str	r0, [r6, #0]
 8006c72:	4621      	mov	r1, r4
 8006c74:	4628      	mov	r0, r5
 8006c76:	f000 fcb7 	bl	80075e8 <_sbrk_r>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	d00a      	beq.n	8006c94 <sbrk_aligned+0x34>
 8006c7e:	1cc4      	adds	r4, r0, #3
 8006c80:	f024 0403 	bic.w	r4, r4, #3
 8006c84:	42a0      	cmp	r0, r4
 8006c86:	d007      	beq.n	8006c98 <sbrk_aligned+0x38>
 8006c88:	1a21      	subs	r1, r4, r0
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 fcac 	bl	80075e8 <_sbrk_r>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d101      	bne.n	8006c98 <sbrk_aligned+0x38>
 8006c94:	f04f 34ff 	mov.w	r4, #4294967295
 8006c98:	4620      	mov	r0, r4
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	200002d8 	.word	0x200002d8

08006ca0 <_malloc_r>:
 8006ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	1ccd      	adds	r5, r1, #3
 8006ca6:	f025 0503 	bic.w	r5, r5, #3
 8006caa:	3508      	adds	r5, #8
 8006cac:	2d0c      	cmp	r5, #12
 8006cae:	bf38      	it	cc
 8006cb0:	250c      	movcc	r5, #12
 8006cb2:	2d00      	cmp	r5, #0
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	db01      	blt.n	8006cbc <_malloc_r+0x1c>
 8006cb8:	42a9      	cmp	r1, r5
 8006cba:	d905      	bls.n	8006cc8 <_malloc_r+0x28>
 8006cbc:	230c      	movs	r3, #12
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d9c <_malloc_r+0xfc>
 8006ccc:	f000 f868 	bl	8006da0 <__malloc_lock>
 8006cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd4:	461c      	mov	r4, r3
 8006cd6:	bb5c      	cbnz	r4, 8006d30 <_malloc_r+0x90>
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f7ff ffc0 	bl	8006c60 <sbrk_aligned>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	d155      	bne.n	8006d92 <_malloc_r+0xf2>
 8006ce6:	f8d8 4000 	ldr.w	r4, [r8]
 8006cea:	4626      	mov	r6, r4
 8006cec:	2e00      	cmp	r6, #0
 8006cee:	d145      	bne.n	8006d7c <_malloc_r+0xdc>
 8006cf0:	2c00      	cmp	r4, #0
 8006cf2:	d048      	beq.n	8006d86 <_malloc_r+0xe6>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	4631      	mov	r1, r6
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	eb04 0903 	add.w	r9, r4, r3
 8006cfe:	f000 fc73 	bl	80075e8 <_sbrk_r>
 8006d02:	4581      	cmp	r9, r0
 8006d04:	d13f      	bne.n	8006d86 <_malloc_r+0xe6>
 8006d06:	6821      	ldr	r1, [r4, #0]
 8006d08:	1a6d      	subs	r5, r5, r1
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7ff ffa7 	bl	8006c60 <sbrk_aligned>
 8006d12:	3001      	adds	r0, #1
 8006d14:	d037      	beq.n	8006d86 <_malloc_r+0xe6>
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	442b      	add	r3, r5
 8006d1a:	6023      	str	r3, [r4, #0]
 8006d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d038      	beq.n	8006d96 <_malloc_r+0xf6>
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	42a2      	cmp	r2, r4
 8006d28:	d12b      	bne.n	8006d82 <_malloc_r+0xe2>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	605a      	str	r2, [r3, #4]
 8006d2e:	e00f      	b.n	8006d50 <_malloc_r+0xb0>
 8006d30:	6822      	ldr	r2, [r4, #0]
 8006d32:	1b52      	subs	r2, r2, r5
 8006d34:	d41f      	bmi.n	8006d76 <_malloc_r+0xd6>
 8006d36:	2a0b      	cmp	r2, #11
 8006d38:	d917      	bls.n	8006d6a <_malloc_r+0xca>
 8006d3a:	1961      	adds	r1, r4, r5
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	6025      	str	r5, [r4, #0]
 8006d40:	bf18      	it	ne
 8006d42:	6059      	strne	r1, [r3, #4]
 8006d44:	6863      	ldr	r3, [r4, #4]
 8006d46:	bf08      	it	eq
 8006d48:	f8c8 1000 	streq.w	r1, [r8]
 8006d4c:	5162      	str	r2, [r4, r5]
 8006d4e:	604b      	str	r3, [r1, #4]
 8006d50:	4638      	mov	r0, r7
 8006d52:	f104 060b 	add.w	r6, r4, #11
 8006d56:	f000 f829 	bl	8006dac <__malloc_unlock>
 8006d5a:	f026 0607 	bic.w	r6, r6, #7
 8006d5e:	1d23      	adds	r3, r4, #4
 8006d60:	1af2      	subs	r2, r6, r3
 8006d62:	d0ae      	beq.n	8006cc2 <_malloc_r+0x22>
 8006d64:	1b9b      	subs	r3, r3, r6
 8006d66:	50a3      	str	r3, [r4, r2]
 8006d68:	e7ab      	b.n	8006cc2 <_malloc_r+0x22>
 8006d6a:	42a3      	cmp	r3, r4
 8006d6c:	6862      	ldr	r2, [r4, #4]
 8006d6e:	d1dd      	bne.n	8006d2c <_malloc_r+0x8c>
 8006d70:	f8c8 2000 	str.w	r2, [r8]
 8006d74:	e7ec      	b.n	8006d50 <_malloc_r+0xb0>
 8006d76:	4623      	mov	r3, r4
 8006d78:	6864      	ldr	r4, [r4, #4]
 8006d7a:	e7ac      	b.n	8006cd6 <_malloc_r+0x36>
 8006d7c:	4634      	mov	r4, r6
 8006d7e:	6876      	ldr	r6, [r6, #4]
 8006d80:	e7b4      	b.n	8006cec <_malloc_r+0x4c>
 8006d82:	4613      	mov	r3, r2
 8006d84:	e7cc      	b.n	8006d20 <_malloc_r+0x80>
 8006d86:	230c      	movs	r3, #12
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	f000 f80e 	bl	8006dac <__malloc_unlock>
 8006d90:	e797      	b.n	8006cc2 <_malloc_r+0x22>
 8006d92:	6025      	str	r5, [r4, #0]
 8006d94:	e7dc      	b.n	8006d50 <_malloc_r+0xb0>
 8006d96:	605b      	str	r3, [r3, #4]
 8006d98:	deff      	udf	#255	; 0xff
 8006d9a:	bf00      	nop
 8006d9c:	200002d4 	.word	0x200002d4

08006da0 <__malloc_lock>:
 8006da0:	4801      	ldr	r0, [pc, #4]	; (8006da8 <__malloc_lock+0x8>)
 8006da2:	f7ff bf0e 	b.w	8006bc2 <__retarget_lock_acquire_recursive>
 8006da6:	bf00      	nop
 8006da8:	200002d0 	.word	0x200002d0

08006dac <__malloc_unlock>:
 8006dac:	4801      	ldr	r0, [pc, #4]	; (8006db4 <__malloc_unlock+0x8>)
 8006dae:	f7ff bf09 	b.w	8006bc4 <__retarget_lock_release_recursive>
 8006db2:	bf00      	nop
 8006db4:	200002d0 	.word	0x200002d0

08006db8 <__sfputc_r>:
 8006db8:	6893      	ldr	r3, [r2, #8]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	b410      	push	{r4}
 8006dc0:	6093      	str	r3, [r2, #8]
 8006dc2:	da08      	bge.n	8006dd6 <__sfputc_r+0x1e>
 8006dc4:	6994      	ldr	r4, [r2, #24]
 8006dc6:	42a3      	cmp	r3, r4
 8006dc8:	db01      	blt.n	8006dce <__sfputc_r+0x16>
 8006dca:	290a      	cmp	r1, #10
 8006dcc:	d103      	bne.n	8006dd6 <__sfputc_r+0x1e>
 8006dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dd2:	f000 bb73 	b.w	80074bc <__swbuf_r>
 8006dd6:	6813      	ldr	r3, [r2, #0]
 8006dd8:	1c58      	adds	r0, r3, #1
 8006dda:	6010      	str	r0, [r2, #0]
 8006ddc:	7019      	strb	r1, [r3, #0]
 8006dde:	4608      	mov	r0, r1
 8006de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <__sfputs_r>:
 8006de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de8:	4606      	mov	r6, r0
 8006dea:	460f      	mov	r7, r1
 8006dec:	4614      	mov	r4, r2
 8006dee:	18d5      	adds	r5, r2, r3
 8006df0:	42ac      	cmp	r4, r5
 8006df2:	d101      	bne.n	8006df8 <__sfputs_r+0x12>
 8006df4:	2000      	movs	r0, #0
 8006df6:	e007      	b.n	8006e08 <__sfputs_r+0x22>
 8006df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfc:	463a      	mov	r2, r7
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f7ff ffda 	bl	8006db8 <__sfputc_r>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d1f3      	bne.n	8006df0 <__sfputs_r+0xa>
 8006e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e0c <_vfiprintf_r>:
 8006e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e10:	460d      	mov	r5, r1
 8006e12:	b09d      	sub	sp, #116	; 0x74
 8006e14:	4614      	mov	r4, r2
 8006e16:	4698      	mov	r8, r3
 8006e18:	4606      	mov	r6, r0
 8006e1a:	b118      	cbz	r0, 8006e24 <_vfiprintf_r+0x18>
 8006e1c:	6a03      	ldr	r3, [r0, #32]
 8006e1e:	b90b      	cbnz	r3, 8006e24 <_vfiprintf_r+0x18>
 8006e20:	f7ff fdca 	bl	80069b8 <__sinit>
 8006e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e26:	07d9      	lsls	r1, r3, #31
 8006e28:	d405      	bmi.n	8006e36 <_vfiprintf_r+0x2a>
 8006e2a:	89ab      	ldrh	r3, [r5, #12]
 8006e2c:	059a      	lsls	r2, r3, #22
 8006e2e:	d402      	bmi.n	8006e36 <_vfiprintf_r+0x2a>
 8006e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e32:	f7ff fec6 	bl	8006bc2 <__retarget_lock_acquire_recursive>
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	071b      	lsls	r3, r3, #28
 8006e3a:	d501      	bpl.n	8006e40 <_vfiprintf_r+0x34>
 8006e3c:	692b      	ldr	r3, [r5, #16]
 8006e3e:	b99b      	cbnz	r3, 8006e68 <_vfiprintf_r+0x5c>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4630      	mov	r0, r6
 8006e44:	f000 fb78 	bl	8007538 <__swsetup_r>
 8006e48:	b170      	cbz	r0, 8006e68 <_vfiprintf_r+0x5c>
 8006e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e4c:	07dc      	lsls	r4, r3, #31
 8006e4e:	d504      	bpl.n	8006e5a <_vfiprintf_r+0x4e>
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	b01d      	add	sp, #116	; 0x74
 8006e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5a:	89ab      	ldrh	r3, [r5, #12]
 8006e5c:	0598      	lsls	r0, r3, #22
 8006e5e:	d4f7      	bmi.n	8006e50 <_vfiprintf_r+0x44>
 8006e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e62:	f7ff feaf 	bl	8006bc4 <__retarget_lock_release_recursive>
 8006e66:	e7f3      	b.n	8006e50 <_vfiprintf_r+0x44>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6c:	2320      	movs	r3, #32
 8006e6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e72:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e76:	2330      	movs	r3, #48	; 0x30
 8006e78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800702c <_vfiprintf_r+0x220>
 8006e7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e80:	f04f 0901 	mov.w	r9, #1
 8006e84:	4623      	mov	r3, r4
 8006e86:	469a      	mov	sl, r3
 8006e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e8c:	b10a      	cbz	r2, 8006e92 <_vfiprintf_r+0x86>
 8006e8e:	2a25      	cmp	r2, #37	; 0x25
 8006e90:	d1f9      	bne.n	8006e86 <_vfiprintf_r+0x7a>
 8006e92:	ebba 0b04 	subs.w	fp, sl, r4
 8006e96:	d00b      	beq.n	8006eb0 <_vfiprintf_r+0xa4>
 8006e98:	465b      	mov	r3, fp
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f7ff ffa1 	bl	8006de6 <__sfputs_r>
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	f000 80a9 	beq.w	8006ffc <_vfiprintf_r+0x1f0>
 8006eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eac:	445a      	add	r2, fp
 8006eae:	9209      	str	r2, [sp, #36]	; 0x24
 8006eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80a1 	beq.w	8006ffc <_vfiprintf_r+0x1f0>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec4:	f10a 0a01 	add.w	sl, sl, #1
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	9307      	str	r3, [sp, #28]
 8006ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8006ed2:	4654      	mov	r4, sl
 8006ed4:	2205      	movs	r2, #5
 8006ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eda:	4854      	ldr	r0, [pc, #336]	; (800702c <_vfiprintf_r+0x220>)
 8006edc:	f7fc f978 	bl	80031d0 <memchr>
 8006ee0:	9a04      	ldr	r2, [sp, #16]
 8006ee2:	b9d8      	cbnz	r0, 8006f1c <_vfiprintf_r+0x110>
 8006ee4:	06d1      	lsls	r1, r2, #27
 8006ee6:	bf44      	itt	mi
 8006ee8:	2320      	movmi	r3, #32
 8006eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eee:	0713      	lsls	r3, r2, #28
 8006ef0:	bf44      	itt	mi
 8006ef2:	232b      	movmi	r3, #43	; 0x2b
 8006ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8006efc:	2b2a      	cmp	r3, #42	; 0x2a
 8006efe:	d015      	beq.n	8006f2c <_vfiprintf_r+0x120>
 8006f00:	9a07      	ldr	r2, [sp, #28]
 8006f02:	4654      	mov	r4, sl
 8006f04:	2000      	movs	r0, #0
 8006f06:	f04f 0c0a 	mov.w	ip, #10
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f10:	3b30      	subs	r3, #48	; 0x30
 8006f12:	2b09      	cmp	r3, #9
 8006f14:	d94d      	bls.n	8006fb2 <_vfiprintf_r+0x1a6>
 8006f16:	b1b0      	cbz	r0, 8006f46 <_vfiprintf_r+0x13a>
 8006f18:	9207      	str	r2, [sp, #28]
 8006f1a:	e014      	b.n	8006f46 <_vfiprintf_r+0x13a>
 8006f1c:	eba0 0308 	sub.w	r3, r0, r8
 8006f20:	fa09 f303 	lsl.w	r3, r9, r3
 8006f24:	4313      	orrs	r3, r2
 8006f26:	9304      	str	r3, [sp, #16]
 8006f28:	46a2      	mov	sl, r4
 8006f2a:	e7d2      	b.n	8006ed2 <_vfiprintf_r+0xc6>
 8006f2c:	9b03      	ldr	r3, [sp, #12]
 8006f2e:	1d19      	adds	r1, r3, #4
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	9103      	str	r1, [sp, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bfbb      	ittet	lt
 8006f38:	425b      	neglt	r3, r3
 8006f3a:	f042 0202 	orrlt.w	r2, r2, #2
 8006f3e:	9307      	strge	r3, [sp, #28]
 8006f40:	9307      	strlt	r3, [sp, #28]
 8006f42:	bfb8      	it	lt
 8006f44:	9204      	strlt	r2, [sp, #16]
 8006f46:	7823      	ldrb	r3, [r4, #0]
 8006f48:	2b2e      	cmp	r3, #46	; 0x2e
 8006f4a:	d10c      	bne.n	8006f66 <_vfiprintf_r+0x15a>
 8006f4c:	7863      	ldrb	r3, [r4, #1]
 8006f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f50:	d134      	bne.n	8006fbc <_vfiprintf_r+0x1b0>
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	1d1a      	adds	r2, r3, #4
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	9203      	str	r2, [sp, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	bfb8      	it	lt
 8006f5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f62:	3402      	adds	r4, #2
 8006f64:	9305      	str	r3, [sp, #20]
 8006f66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800703c <_vfiprintf_r+0x230>
 8006f6a:	7821      	ldrb	r1, [r4, #0]
 8006f6c:	2203      	movs	r2, #3
 8006f6e:	4650      	mov	r0, sl
 8006f70:	f7fc f92e 	bl	80031d0 <memchr>
 8006f74:	b138      	cbz	r0, 8006f86 <_vfiprintf_r+0x17a>
 8006f76:	9b04      	ldr	r3, [sp, #16]
 8006f78:	eba0 000a 	sub.w	r0, r0, sl
 8006f7c:	2240      	movs	r2, #64	; 0x40
 8006f7e:	4082      	lsls	r2, r0
 8006f80:	4313      	orrs	r3, r2
 8006f82:	3401      	adds	r4, #1
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8a:	4829      	ldr	r0, [pc, #164]	; (8007030 <_vfiprintf_r+0x224>)
 8006f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f90:	2206      	movs	r2, #6
 8006f92:	f7fc f91d 	bl	80031d0 <memchr>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d03f      	beq.n	800701a <_vfiprintf_r+0x20e>
 8006f9a:	4b26      	ldr	r3, [pc, #152]	; (8007034 <_vfiprintf_r+0x228>)
 8006f9c:	bb1b      	cbnz	r3, 8006fe6 <_vfiprintf_r+0x1da>
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	3307      	adds	r3, #7
 8006fa2:	f023 0307 	bic.w	r3, r3, #7
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	9303      	str	r3, [sp, #12]
 8006faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fac:	443b      	add	r3, r7
 8006fae:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb0:	e768      	b.n	8006e84 <_vfiprintf_r+0x78>
 8006fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	2001      	movs	r0, #1
 8006fba:	e7a6      	b.n	8006f0a <_vfiprintf_r+0xfe>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	3401      	adds	r4, #1
 8006fc0:	9305      	str	r3, [sp, #20]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f04f 0c0a 	mov.w	ip, #10
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fce:	3a30      	subs	r2, #48	; 0x30
 8006fd0:	2a09      	cmp	r2, #9
 8006fd2:	d903      	bls.n	8006fdc <_vfiprintf_r+0x1d0>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0c6      	beq.n	8006f66 <_vfiprintf_r+0x15a>
 8006fd8:	9105      	str	r1, [sp, #20]
 8006fda:	e7c4      	b.n	8006f66 <_vfiprintf_r+0x15a>
 8006fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e7f0      	b.n	8006fc8 <_vfiprintf_r+0x1bc>
 8006fe6:	ab03      	add	r3, sp, #12
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	462a      	mov	r2, r5
 8006fec:	4b12      	ldr	r3, [pc, #72]	; (8007038 <_vfiprintf_r+0x22c>)
 8006fee:	a904      	add	r1, sp, #16
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f3af 8000 	nop.w
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	1c78      	adds	r0, r7, #1
 8006ffa:	d1d6      	bne.n	8006faa <_vfiprintf_r+0x19e>
 8006ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ffe:	07d9      	lsls	r1, r3, #31
 8007000:	d405      	bmi.n	800700e <_vfiprintf_r+0x202>
 8007002:	89ab      	ldrh	r3, [r5, #12]
 8007004:	059a      	lsls	r2, r3, #22
 8007006:	d402      	bmi.n	800700e <_vfiprintf_r+0x202>
 8007008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800700a:	f7ff fddb 	bl	8006bc4 <__retarget_lock_release_recursive>
 800700e:	89ab      	ldrh	r3, [r5, #12]
 8007010:	065b      	lsls	r3, r3, #25
 8007012:	f53f af1d 	bmi.w	8006e50 <_vfiprintf_r+0x44>
 8007016:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007018:	e71c      	b.n	8006e54 <_vfiprintf_r+0x48>
 800701a:	ab03      	add	r3, sp, #12
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	462a      	mov	r2, r5
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <_vfiprintf_r+0x22c>)
 8007022:	a904      	add	r1, sp, #16
 8007024:	4630      	mov	r0, r6
 8007026:	f000 f879 	bl	800711c <_printf_i>
 800702a:	e7e4      	b.n	8006ff6 <_vfiprintf_r+0x1ea>
 800702c:	0800777c 	.word	0x0800777c
 8007030:	08007786 	.word	0x08007786
 8007034:	00000000 	.word	0x00000000
 8007038:	08006de7 	.word	0x08006de7
 800703c:	08007782 	.word	0x08007782

08007040 <_printf_common>:
 8007040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007044:	4616      	mov	r6, r2
 8007046:	4699      	mov	r9, r3
 8007048:	688a      	ldr	r2, [r1, #8]
 800704a:	690b      	ldr	r3, [r1, #16]
 800704c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007050:	4293      	cmp	r3, r2
 8007052:	bfb8      	it	lt
 8007054:	4613      	movlt	r3, r2
 8007056:	6033      	str	r3, [r6, #0]
 8007058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800705c:	4607      	mov	r7, r0
 800705e:	460c      	mov	r4, r1
 8007060:	b10a      	cbz	r2, 8007066 <_printf_common+0x26>
 8007062:	3301      	adds	r3, #1
 8007064:	6033      	str	r3, [r6, #0]
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	0699      	lsls	r1, r3, #26
 800706a:	bf42      	ittt	mi
 800706c:	6833      	ldrmi	r3, [r6, #0]
 800706e:	3302      	addmi	r3, #2
 8007070:	6033      	strmi	r3, [r6, #0]
 8007072:	6825      	ldr	r5, [r4, #0]
 8007074:	f015 0506 	ands.w	r5, r5, #6
 8007078:	d106      	bne.n	8007088 <_printf_common+0x48>
 800707a:	f104 0a19 	add.w	sl, r4, #25
 800707e:	68e3      	ldr	r3, [r4, #12]
 8007080:	6832      	ldr	r2, [r6, #0]
 8007082:	1a9b      	subs	r3, r3, r2
 8007084:	42ab      	cmp	r3, r5
 8007086:	dc26      	bgt.n	80070d6 <_printf_common+0x96>
 8007088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800708c:	1e13      	subs	r3, r2, #0
 800708e:	6822      	ldr	r2, [r4, #0]
 8007090:	bf18      	it	ne
 8007092:	2301      	movne	r3, #1
 8007094:	0692      	lsls	r2, r2, #26
 8007096:	d42b      	bmi.n	80070f0 <_printf_common+0xb0>
 8007098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800709c:	4649      	mov	r1, r9
 800709e:	4638      	mov	r0, r7
 80070a0:	47c0      	blx	r8
 80070a2:	3001      	adds	r0, #1
 80070a4:	d01e      	beq.n	80070e4 <_printf_common+0xa4>
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	6922      	ldr	r2, [r4, #16]
 80070aa:	f003 0306 	and.w	r3, r3, #6
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	bf02      	ittt	eq
 80070b2:	68e5      	ldreq	r5, [r4, #12]
 80070b4:	6833      	ldreq	r3, [r6, #0]
 80070b6:	1aed      	subeq	r5, r5, r3
 80070b8:	68a3      	ldr	r3, [r4, #8]
 80070ba:	bf0c      	ite	eq
 80070bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070c0:	2500      	movne	r5, #0
 80070c2:	4293      	cmp	r3, r2
 80070c4:	bfc4      	itt	gt
 80070c6:	1a9b      	subgt	r3, r3, r2
 80070c8:	18ed      	addgt	r5, r5, r3
 80070ca:	2600      	movs	r6, #0
 80070cc:	341a      	adds	r4, #26
 80070ce:	42b5      	cmp	r5, r6
 80070d0:	d11a      	bne.n	8007108 <_printf_common+0xc8>
 80070d2:	2000      	movs	r0, #0
 80070d4:	e008      	b.n	80070e8 <_printf_common+0xa8>
 80070d6:	2301      	movs	r3, #1
 80070d8:	4652      	mov	r2, sl
 80070da:	4649      	mov	r1, r9
 80070dc:	4638      	mov	r0, r7
 80070de:	47c0      	blx	r8
 80070e0:	3001      	adds	r0, #1
 80070e2:	d103      	bne.n	80070ec <_printf_common+0xac>
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ec:	3501      	adds	r5, #1
 80070ee:	e7c6      	b.n	800707e <_printf_common+0x3e>
 80070f0:	18e1      	adds	r1, r4, r3
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	2030      	movs	r0, #48	; 0x30
 80070f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070fa:	4422      	add	r2, r4
 80070fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007104:	3302      	adds	r3, #2
 8007106:	e7c7      	b.n	8007098 <_printf_common+0x58>
 8007108:	2301      	movs	r3, #1
 800710a:	4622      	mov	r2, r4
 800710c:	4649      	mov	r1, r9
 800710e:	4638      	mov	r0, r7
 8007110:	47c0      	blx	r8
 8007112:	3001      	adds	r0, #1
 8007114:	d0e6      	beq.n	80070e4 <_printf_common+0xa4>
 8007116:	3601      	adds	r6, #1
 8007118:	e7d9      	b.n	80070ce <_printf_common+0x8e>
	...

0800711c <_printf_i>:
 800711c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007120:	7e0f      	ldrb	r7, [r1, #24]
 8007122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007124:	2f78      	cmp	r7, #120	; 0x78
 8007126:	4691      	mov	r9, r2
 8007128:	4680      	mov	r8, r0
 800712a:	460c      	mov	r4, r1
 800712c:	469a      	mov	sl, r3
 800712e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007132:	d807      	bhi.n	8007144 <_printf_i+0x28>
 8007134:	2f62      	cmp	r7, #98	; 0x62
 8007136:	d80a      	bhi.n	800714e <_printf_i+0x32>
 8007138:	2f00      	cmp	r7, #0
 800713a:	f000 80d4 	beq.w	80072e6 <_printf_i+0x1ca>
 800713e:	2f58      	cmp	r7, #88	; 0x58
 8007140:	f000 80c0 	beq.w	80072c4 <_printf_i+0x1a8>
 8007144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800714c:	e03a      	b.n	80071c4 <_printf_i+0xa8>
 800714e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007152:	2b15      	cmp	r3, #21
 8007154:	d8f6      	bhi.n	8007144 <_printf_i+0x28>
 8007156:	a101      	add	r1, pc, #4	; (adr r1, 800715c <_printf_i+0x40>)
 8007158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800715c:	080071b5 	.word	0x080071b5
 8007160:	080071c9 	.word	0x080071c9
 8007164:	08007145 	.word	0x08007145
 8007168:	08007145 	.word	0x08007145
 800716c:	08007145 	.word	0x08007145
 8007170:	08007145 	.word	0x08007145
 8007174:	080071c9 	.word	0x080071c9
 8007178:	08007145 	.word	0x08007145
 800717c:	08007145 	.word	0x08007145
 8007180:	08007145 	.word	0x08007145
 8007184:	08007145 	.word	0x08007145
 8007188:	080072cd 	.word	0x080072cd
 800718c:	080071f5 	.word	0x080071f5
 8007190:	08007287 	.word	0x08007287
 8007194:	08007145 	.word	0x08007145
 8007198:	08007145 	.word	0x08007145
 800719c:	080072ef 	.word	0x080072ef
 80071a0:	08007145 	.word	0x08007145
 80071a4:	080071f5 	.word	0x080071f5
 80071a8:	08007145 	.word	0x08007145
 80071ac:	08007145 	.word	0x08007145
 80071b0:	0800728f 	.word	0x0800728f
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	1d1a      	adds	r2, r3, #4
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	602a      	str	r2, [r5, #0]
 80071bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071c4:	2301      	movs	r3, #1
 80071c6:	e09f      	b.n	8007308 <_printf_i+0x1ec>
 80071c8:	6820      	ldr	r0, [r4, #0]
 80071ca:	682b      	ldr	r3, [r5, #0]
 80071cc:	0607      	lsls	r7, r0, #24
 80071ce:	f103 0104 	add.w	r1, r3, #4
 80071d2:	6029      	str	r1, [r5, #0]
 80071d4:	d501      	bpl.n	80071da <_printf_i+0xbe>
 80071d6:	681e      	ldr	r6, [r3, #0]
 80071d8:	e003      	b.n	80071e2 <_printf_i+0xc6>
 80071da:	0646      	lsls	r6, r0, #25
 80071dc:	d5fb      	bpl.n	80071d6 <_printf_i+0xba>
 80071de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80071e2:	2e00      	cmp	r6, #0
 80071e4:	da03      	bge.n	80071ee <_printf_i+0xd2>
 80071e6:	232d      	movs	r3, #45	; 0x2d
 80071e8:	4276      	negs	r6, r6
 80071ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ee:	485a      	ldr	r0, [pc, #360]	; (8007358 <_printf_i+0x23c>)
 80071f0:	230a      	movs	r3, #10
 80071f2:	e012      	b.n	800721a <_printf_i+0xfe>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	6820      	ldr	r0, [r4, #0]
 80071f8:	1d19      	adds	r1, r3, #4
 80071fa:	6029      	str	r1, [r5, #0]
 80071fc:	0605      	lsls	r5, r0, #24
 80071fe:	d501      	bpl.n	8007204 <_printf_i+0xe8>
 8007200:	681e      	ldr	r6, [r3, #0]
 8007202:	e002      	b.n	800720a <_printf_i+0xee>
 8007204:	0641      	lsls	r1, r0, #25
 8007206:	d5fb      	bpl.n	8007200 <_printf_i+0xe4>
 8007208:	881e      	ldrh	r6, [r3, #0]
 800720a:	4853      	ldr	r0, [pc, #332]	; (8007358 <_printf_i+0x23c>)
 800720c:	2f6f      	cmp	r7, #111	; 0x6f
 800720e:	bf0c      	ite	eq
 8007210:	2308      	moveq	r3, #8
 8007212:	230a      	movne	r3, #10
 8007214:	2100      	movs	r1, #0
 8007216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800721a:	6865      	ldr	r5, [r4, #4]
 800721c:	60a5      	str	r5, [r4, #8]
 800721e:	2d00      	cmp	r5, #0
 8007220:	bfa2      	ittt	ge
 8007222:	6821      	ldrge	r1, [r4, #0]
 8007224:	f021 0104 	bicge.w	r1, r1, #4
 8007228:	6021      	strge	r1, [r4, #0]
 800722a:	b90e      	cbnz	r6, 8007230 <_printf_i+0x114>
 800722c:	2d00      	cmp	r5, #0
 800722e:	d04b      	beq.n	80072c8 <_printf_i+0x1ac>
 8007230:	4615      	mov	r5, r2
 8007232:	fbb6 f1f3 	udiv	r1, r6, r3
 8007236:	fb03 6711 	mls	r7, r3, r1, r6
 800723a:	5dc7      	ldrb	r7, [r0, r7]
 800723c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007240:	4637      	mov	r7, r6
 8007242:	42bb      	cmp	r3, r7
 8007244:	460e      	mov	r6, r1
 8007246:	d9f4      	bls.n	8007232 <_printf_i+0x116>
 8007248:	2b08      	cmp	r3, #8
 800724a:	d10b      	bne.n	8007264 <_printf_i+0x148>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	07de      	lsls	r6, r3, #31
 8007250:	d508      	bpl.n	8007264 <_printf_i+0x148>
 8007252:	6923      	ldr	r3, [r4, #16]
 8007254:	6861      	ldr	r1, [r4, #4]
 8007256:	4299      	cmp	r1, r3
 8007258:	bfde      	ittt	le
 800725a:	2330      	movle	r3, #48	; 0x30
 800725c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007260:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007264:	1b52      	subs	r2, r2, r5
 8007266:	6122      	str	r2, [r4, #16]
 8007268:	f8cd a000 	str.w	sl, [sp]
 800726c:	464b      	mov	r3, r9
 800726e:	aa03      	add	r2, sp, #12
 8007270:	4621      	mov	r1, r4
 8007272:	4640      	mov	r0, r8
 8007274:	f7ff fee4 	bl	8007040 <_printf_common>
 8007278:	3001      	adds	r0, #1
 800727a:	d14a      	bne.n	8007312 <_printf_i+0x1f6>
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	b004      	add	sp, #16
 8007282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	f043 0320 	orr.w	r3, r3, #32
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	4833      	ldr	r0, [pc, #204]	; (800735c <_printf_i+0x240>)
 8007290:	2778      	movs	r7, #120	; 0x78
 8007292:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	6829      	ldr	r1, [r5, #0]
 800729a:	061f      	lsls	r7, r3, #24
 800729c:	f851 6b04 	ldr.w	r6, [r1], #4
 80072a0:	d402      	bmi.n	80072a8 <_printf_i+0x18c>
 80072a2:	065f      	lsls	r7, r3, #25
 80072a4:	bf48      	it	mi
 80072a6:	b2b6      	uxthmi	r6, r6
 80072a8:	07df      	lsls	r7, r3, #31
 80072aa:	bf48      	it	mi
 80072ac:	f043 0320 	orrmi.w	r3, r3, #32
 80072b0:	6029      	str	r1, [r5, #0]
 80072b2:	bf48      	it	mi
 80072b4:	6023      	strmi	r3, [r4, #0]
 80072b6:	b91e      	cbnz	r6, 80072c0 <_printf_i+0x1a4>
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	f023 0320 	bic.w	r3, r3, #32
 80072be:	6023      	str	r3, [r4, #0]
 80072c0:	2310      	movs	r3, #16
 80072c2:	e7a7      	b.n	8007214 <_printf_i+0xf8>
 80072c4:	4824      	ldr	r0, [pc, #144]	; (8007358 <_printf_i+0x23c>)
 80072c6:	e7e4      	b.n	8007292 <_printf_i+0x176>
 80072c8:	4615      	mov	r5, r2
 80072ca:	e7bd      	b.n	8007248 <_printf_i+0x12c>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	6826      	ldr	r6, [r4, #0]
 80072d0:	6961      	ldr	r1, [r4, #20]
 80072d2:	1d18      	adds	r0, r3, #4
 80072d4:	6028      	str	r0, [r5, #0]
 80072d6:	0635      	lsls	r5, r6, #24
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	d501      	bpl.n	80072e0 <_printf_i+0x1c4>
 80072dc:	6019      	str	r1, [r3, #0]
 80072de:	e002      	b.n	80072e6 <_printf_i+0x1ca>
 80072e0:	0670      	lsls	r0, r6, #25
 80072e2:	d5fb      	bpl.n	80072dc <_printf_i+0x1c0>
 80072e4:	8019      	strh	r1, [r3, #0]
 80072e6:	2300      	movs	r3, #0
 80072e8:	6123      	str	r3, [r4, #16]
 80072ea:	4615      	mov	r5, r2
 80072ec:	e7bc      	b.n	8007268 <_printf_i+0x14c>
 80072ee:	682b      	ldr	r3, [r5, #0]
 80072f0:	1d1a      	adds	r2, r3, #4
 80072f2:	602a      	str	r2, [r5, #0]
 80072f4:	681d      	ldr	r5, [r3, #0]
 80072f6:	6862      	ldr	r2, [r4, #4]
 80072f8:	2100      	movs	r1, #0
 80072fa:	4628      	mov	r0, r5
 80072fc:	f7fb ff68 	bl	80031d0 <memchr>
 8007300:	b108      	cbz	r0, 8007306 <_printf_i+0x1ea>
 8007302:	1b40      	subs	r0, r0, r5
 8007304:	6060      	str	r0, [r4, #4]
 8007306:	6863      	ldr	r3, [r4, #4]
 8007308:	6123      	str	r3, [r4, #16]
 800730a:	2300      	movs	r3, #0
 800730c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007310:	e7aa      	b.n	8007268 <_printf_i+0x14c>
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	462a      	mov	r2, r5
 8007316:	4649      	mov	r1, r9
 8007318:	4640      	mov	r0, r8
 800731a:	47d0      	blx	sl
 800731c:	3001      	adds	r0, #1
 800731e:	d0ad      	beq.n	800727c <_printf_i+0x160>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	079b      	lsls	r3, r3, #30
 8007324:	d413      	bmi.n	800734e <_printf_i+0x232>
 8007326:	68e0      	ldr	r0, [r4, #12]
 8007328:	9b03      	ldr	r3, [sp, #12]
 800732a:	4298      	cmp	r0, r3
 800732c:	bfb8      	it	lt
 800732e:	4618      	movlt	r0, r3
 8007330:	e7a6      	b.n	8007280 <_printf_i+0x164>
 8007332:	2301      	movs	r3, #1
 8007334:	4632      	mov	r2, r6
 8007336:	4649      	mov	r1, r9
 8007338:	4640      	mov	r0, r8
 800733a:	47d0      	blx	sl
 800733c:	3001      	adds	r0, #1
 800733e:	d09d      	beq.n	800727c <_printf_i+0x160>
 8007340:	3501      	adds	r5, #1
 8007342:	68e3      	ldr	r3, [r4, #12]
 8007344:	9903      	ldr	r1, [sp, #12]
 8007346:	1a5b      	subs	r3, r3, r1
 8007348:	42ab      	cmp	r3, r5
 800734a:	dcf2      	bgt.n	8007332 <_printf_i+0x216>
 800734c:	e7eb      	b.n	8007326 <_printf_i+0x20a>
 800734e:	2500      	movs	r5, #0
 8007350:	f104 0619 	add.w	r6, r4, #25
 8007354:	e7f5      	b.n	8007342 <_printf_i+0x226>
 8007356:	bf00      	nop
 8007358:	0800778d 	.word	0x0800778d
 800735c:	0800779e 	.word	0x0800779e

08007360 <__sflush_r>:
 8007360:	898a      	ldrh	r2, [r1, #12]
 8007362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007366:	4605      	mov	r5, r0
 8007368:	0710      	lsls	r0, r2, #28
 800736a:	460c      	mov	r4, r1
 800736c:	d458      	bmi.n	8007420 <__sflush_r+0xc0>
 800736e:	684b      	ldr	r3, [r1, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	dc05      	bgt.n	8007380 <__sflush_r+0x20>
 8007374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	dc02      	bgt.n	8007380 <__sflush_r+0x20>
 800737a:	2000      	movs	r0, #0
 800737c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007382:	2e00      	cmp	r6, #0
 8007384:	d0f9      	beq.n	800737a <__sflush_r+0x1a>
 8007386:	2300      	movs	r3, #0
 8007388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800738c:	682f      	ldr	r7, [r5, #0]
 800738e:	6a21      	ldr	r1, [r4, #32]
 8007390:	602b      	str	r3, [r5, #0]
 8007392:	d032      	beq.n	80073fa <__sflush_r+0x9a>
 8007394:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	075a      	lsls	r2, r3, #29
 800739a:	d505      	bpl.n	80073a8 <__sflush_r+0x48>
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	1ac0      	subs	r0, r0, r3
 80073a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073a2:	b10b      	cbz	r3, 80073a8 <__sflush_r+0x48>
 80073a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073a6:	1ac0      	subs	r0, r0, r3
 80073a8:	2300      	movs	r3, #0
 80073aa:	4602      	mov	r2, r0
 80073ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073ae:	6a21      	ldr	r1, [r4, #32]
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b0      	blx	r6
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	d106      	bne.n	80073c8 <__sflush_r+0x68>
 80073ba:	6829      	ldr	r1, [r5, #0]
 80073bc:	291d      	cmp	r1, #29
 80073be:	d82b      	bhi.n	8007418 <__sflush_r+0xb8>
 80073c0:	4a29      	ldr	r2, [pc, #164]	; (8007468 <__sflush_r+0x108>)
 80073c2:	410a      	asrs	r2, r1
 80073c4:	07d6      	lsls	r6, r2, #31
 80073c6:	d427      	bmi.n	8007418 <__sflush_r+0xb8>
 80073c8:	2200      	movs	r2, #0
 80073ca:	6062      	str	r2, [r4, #4]
 80073cc:	04d9      	lsls	r1, r3, #19
 80073ce:	6922      	ldr	r2, [r4, #16]
 80073d0:	6022      	str	r2, [r4, #0]
 80073d2:	d504      	bpl.n	80073de <__sflush_r+0x7e>
 80073d4:	1c42      	adds	r2, r0, #1
 80073d6:	d101      	bne.n	80073dc <__sflush_r+0x7c>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	b903      	cbnz	r3, 80073de <__sflush_r+0x7e>
 80073dc:	6560      	str	r0, [r4, #84]	; 0x54
 80073de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073e0:	602f      	str	r7, [r5, #0]
 80073e2:	2900      	cmp	r1, #0
 80073e4:	d0c9      	beq.n	800737a <__sflush_r+0x1a>
 80073e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ea:	4299      	cmp	r1, r3
 80073ec:	d002      	beq.n	80073f4 <__sflush_r+0x94>
 80073ee:	4628      	mov	r0, r5
 80073f0:	f7ff fbea 	bl	8006bc8 <_free_r>
 80073f4:	2000      	movs	r0, #0
 80073f6:	6360      	str	r0, [r4, #52]	; 0x34
 80073f8:	e7c0      	b.n	800737c <__sflush_r+0x1c>
 80073fa:	2301      	movs	r3, #1
 80073fc:	4628      	mov	r0, r5
 80073fe:	47b0      	blx	r6
 8007400:	1c41      	adds	r1, r0, #1
 8007402:	d1c8      	bne.n	8007396 <__sflush_r+0x36>
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0c5      	beq.n	8007396 <__sflush_r+0x36>
 800740a:	2b1d      	cmp	r3, #29
 800740c:	d001      	beq.n	8007412 <__sflush_r+0xb2>
 800740e:	2b16      	cmp	r3, #22
 8007410:	d101      	bne.n	8007416 <__sflush_r+0xb6>
 8007412:	602f      	str	r7, [r5, #0]
 8007414:	e7b1      	b.n	800737a <__sflush_r+0x1a>
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	e7ad      	b.n	800737c <__sflush_r+0x1c>
 8007420:	690f      	ldr	r7, [r1, #16]
 8007422:	2f00      	cmp	r7, #0
 8007424:	d0a9      	beq.n	800737a <__sflush_r+0x1a>
 8007426:	0793      	lsls	r3, r2, #30
 8007428:	680e      	ldr	r6, [r1, #0]
 800742a:	bf08      	it	eq
 800742c:	694b      	ldreq	r3, [r1, #20]
 800742e:	600f      	str	r7, [r1, #0]
 8007430:	bf18      	it	ne
 8007432:	2300      	movne	r3, #0
 8007434:	eba6 0807 	sub.w	r8, r6, r7
 8007438:	608b      	str	r3, [r1, #8]
 800743a:	f1b8 0f00 	cmp.w	r8, #0
 800743e:	dd9c      	ble.n	800737a <__sflush_r+0x1a>
 8007440:	6a21      	ldr	r1, [r4, #32]
 8007442:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007444:	4643      	mov	r3, r8
 8007446:	463a      	mov	r2, r7
 8007448:	4628      	mov	r0, r5
 800744a:	47b0      	blx	r6
 800744c:	2800      	cmp	r0, #0
 800744e:	dc06      	bgt.n	800745e <__sflush_r+0xfe>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007456:	81a3      	strh	r3, [r4, #12]
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	e78e      	b.n	800737c <__sflush_r+0x1c>
 800745e:	4407      	add	r7, r0
 8007460:	eba8 0800 	sub.w	r8, r8, r0
 8007464:	e7e9      	b.n	800743a <__sflush_r+0xda>
 8007466:	bf00      	nop
 8007468:	dfbffffe 	.word	0xdfbffffe

0800746c <_fflush_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	690b      	ldr	r3, [r1, #16]
 8007470:	4605      	mov	r5, r0
 8007472:	460c      	mov	r4, r1
 8007474:	b913      	cbnz	r3, 800747c <_fflush_r+0x10>
 8007476:	2500      	movs	r5, #0
 8007478:	4628      	mov	r0, r5
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	b118      	cbz	r0, 8007486 <_fflush_r+0x1a>
 800747e:	6a03      	ldr	r3, [r0, #32]
 8007480:	b90b      	cbnz	r3, 8007486 <_fflush_r+0x1a>
 8007482:	f7ff fa99 	bl	80069b8 <__sinit>
 8007486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0f3      	beq.n	8007476 <_fflush_r+0xa>
 800748e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007490:	07d0      	lsls	r0, r2, #31
 8007492:	d404      	bmi.n	800749e <_fflush_r+0x32>
 8007494:	0599      	lsls	r1, r3, #22
 8007496:	d402      	bmi.n	800749e <_fflush_r+0x32>
 8007498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800749a:	f7ff fb92 	bl	8006bc2 <__retarget_lock_acquire_recursive>
 800749e:	4628      	mov	r0, r5
 80074a0:	4621      	mov	r1, r4
 80074a2:	f7ff ff5d 	bl	8007360 <__sflush_r>
 80074a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074a8:	07da      	lsls	r2, r3, #31
 80074aa:	4605      	mov	r5, r0
 80074ac:	d4e4      	bmi.n	8007478 <_fflush_r+0xc>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	059b      	lsls	r3, r3, #22
 80074b2:	d4e1      	bmi.n	8007478 <_fflush_r+0xc>
 80074b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074b6:	f7ff fb85 	bl	8006bc4 <__retarget_lock_release_recursive>
 80074ba:	e7dd      	b.n	8007478 <_fflush_r+0xc>

080074bc <__swbuf_r>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	460e      	mov	r6, r1
 80074c0:	4614      	mov	r4, r2
 80074c2:	4605      	mov	r5, r0
 80074c4:	b118      	cbz	r0, 80074ce <__swbuf_r+0x12>
 80074c6:	6a03      	ldr	r3, [r0, #32]
 80074c8:	b90b      	cbnz	r3, 80074ce <__swbuf_r+0x12>
 80074ca:	f7ff fa75 	bl	80069b8 <__sinit>
 80074ce:	69a3      	ldr	r3, [r4, #24]
 80074d0:	60a3      	str	r3, [r4, #8]
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	071a      	lsls	r2, r3, #28
 80074d6:	d525      	bpl.n	8007524 <__swbuf_r+0x68>
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	b31b      	cbz	r3, 8007524 <__swbuf_r+0x68>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	6922      	ldr	r2, [r4, #16]
 80074e0:	1a98      	subs	r0, r3, r2
 80074e2:	6963      	ldr	r3, [r4, #20]
 80074e4:	b2f6      	uxtb	r6, r6
 80074e6:	4283      	cmp	r3, r0
 80074e8:	4637      	mov	r7, r6
 80074ea:	dc04      	bgt.n	80074f6 <__swbuf_r+0x3a>
 80074ec:	4621      	mov	r1, r4
 80074ee:	4628      	mov	r0, r5
 80074f0:	f7ff ffbc 	bl	800746c <_fflush_r>
 80074f4:	b9e0      	cbnz	r0, 8007530 <__swbuf_r+0x74>
 80074f6:	68a3      	ldr	r3, [r4, #8]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	60a3      	str	r3, [r4, #8]
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	6022      	str	r2, [r4, #0]
 8007502:	701e      	strb	r6, [r3, #0]
 8007504:	6962      	ldr	r2, [r4, #20]
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	429a      	cmp	r2, r3
 800750a:	d004      	beq.n	8007516 <__swbuf_r+0x5a>
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	07db      	lsls	r3, r3, #31
 8007510:	d506      	bpl.n	8007520 <__swbuf_r+0x64>
 8007512:	2e0a      	cmp	r6, #10
 8007514:	d104      	bne.n	8007520 <__swbuf_r+0x64>
 8007516:	4621      	mov	r1, r4
 8007518:	4628      	mov	r0, r5
 800751a:	f7ff ffa7 	bl	800746c <_fflush_r>
 800751e:	b938      	cbnz	r0, 8007530 <__swbuf_r+0x74>
 8007520:	4638      	mov	r0, r7
 8007522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007524:	4621      	mov	r1, r4
 8007526:	4628      	mov	r0, r5
 8007528:	f000 f806 	bl	8007538 <__swsetup_r>
 800752c:	2800      	cmp	r0, #0
 800752e:	d0d5      	beq.n	80074dc <__swbuf_r+0x20>
 8007530:	f04f 37ff 	mov.w	r7, #4294967295
 8007534:	e7f4      	b.n	8007520 <__swbuf_r+0x64>
	...

08007538 <__swsetup_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4b2a      	ldr	r3, [pc, #168]	; (80075e4 <__swsetup_r+0xac>)
 800753c:	4605      	mov	r5, r0
 800753e:	6818      	ldr	r0, [r3, #0]
 8007540:	460c      	mov	r4, r1
 8007542:	b118      	cbz	r0, 800754c <__swsetup_r+0x14>
 8007544:	6a03      	ldr	r3, [r0, #32]
 8007546:	b90b      	cbnz	r3, 800754c <__swsetup_r+0x14>
 8007548:	f7ff fa36 	bl	80069b8 <__sinit>
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007552:	0718      	lsls	r0, r3, #28
 8007554:	d422      	bmi.n	800759c <__swsetup_r+0x64>
 8007556:	06d9      	lsls	r1, r3, #27
 8007558:	d407      	bmi.n	800756a <__swsetup_r+0x32>
 800755a:	2309      	movs	r3, #9
 800755c:	602b      	str	r3, [r5, #0]
 800755e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007562:	81a3      	strh	r3, [r4, #12]
 8007564:	f04f 30ff 	mov.w	r0, #4294967295
 8007568:	e034      	b.n	80075d4 <__swsetup_r+0x9c>
 800756a:	0758      	lsls	r0, r3, #29
 800756c:	d512      	bpl.n	8007594 <__swsetup_r+0x5c>
 800756e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007570:	b141      	cbz	r1, 8007584 <__swsetup_r+0x4c>
 8007572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007576:	4299      	cmp	r1, r3
 8007578:	d002      	beq.n	8007580 <__swsetup_r+0x48>
 800757a:	4628      	mov	r0, r5
 800757c:	f7ff fb24 	bl	8006bc8 <_free_r>
 8007580:	2300      	movs	r3, #0
 8007582:	6363      	str	r3, [r4, #52]	; 0x34
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800758a:	81a3      	strh	r3, [r4, #12]
 800758c:	2300      	movs	r3, #0
 800758e:	6063      	str	r3, [r4, #4]
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	6023      	str	r3, [r4, #0]
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	f043 0308 	orr.w	r3, r3, #8
 800759a:	81a3      	strh	r3, [r4, #12]
 800759c:	6923      	ldr	r3, [r4, #16]
 800759e:	b94b      	cbnz	r3, 80075b4 <__swsetup_r+0x7c>
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075aa:	d003      	beq.n	80075b4 <__swsetup_r+0x7c>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4628      	mov	r0, r5
 80075b0:	f000 f850 	bl	8007654 <__smakebuf_r>
 80075b4:	89a0      	ldrh	r0, [r4, #12]
 80075b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075ba:	f010 0301 	ands.w	r3, r0, #1
 80075be:	d00a      	beq.n	80075d6 <__swsetup_r+0x9e>
 80075c0:	2300      	movs	r3, #0
 80075c2:	60a3      	str	r3, [r4, #8]
 80075c4:	6963      	ldr	r3, [r4, #20]
 80075c6:	425b      	negs	r3, r3
 80075c8:	61a3      	str	r3, [r4, #24]
 80075ca:	6923      	ldr	r3, [r4, #16]
 80075cc:	b943      	cbnz	r3, 80075e0 <__swsetup_r+0xa8>
 80075ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075d2:	d1c4      	bne.n	800755e <__swsetup_r+0x26>
 80075d4:	bd38      	pop	{r3, r4, r5, pc}
 80075d6:	0781      	lsls	r1, r0, #30
 80075d8:	bf58      	it	pl
 80075da:	6963      	ldrpl	r3, [r4, #20]
 80075dc:	60a3      	str	r3, [r4, #8]
 80075de:	e7f4      	b.n	80075ca <__swsetup_r+0x92>
 80075e0:	2000      	movs	r0, #0
 80075e2:	e7f7      	b.n	80075d4 <__swsetup_r+0x9c>
 80075e4:	20000084 	.word	0x20000084

080075e8 <_sbrk_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d06      	ldr	r5, [pc, #24]	; (8007604 <_sbrk_r+0x1c>)
 80075ec:	2300      	movs	r3, #0
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	f7fc f9de 	bl	80039b4 <_sbrk>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_sbrk_r+0x1a>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_sbrk_r+0x1a>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	200002cc 	.word	0x200002cc

08007608 <__swhatbuf_r>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	460c      	mov	r4, r1
 800760c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007610:	2900      	cmp	r1, #0
 8007612:	b096      	sub	sp, #88	; 0x58
 8007614:	4615      	mov	r5, r2
 8007616:	461e      	mov	r6, r3
 8007618:	da0d      	bge.n	8007636 <__swhatbuf_r+0x2e>
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007620:	f04f 0100 	mov.w	r1, #0
 8007624:	bf0c      	ite	eq
 8007626:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800762a:	2340      	movne	r3, #64	; 0x40
 800762c:	2000      	movs	r0, #0
 800762e:	6031      	str	r1, [r6, #0]
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	b016      	add	sp, #88	; 0x58
 8007634:	bd70      	pop	{r4, r5, r6, pc}
 8007636:	466a      	mov	r2, sp
 8007638:	f000 f848 	bl	80076cc <_fstat_r>
 800763c:	2800      	cmp	r0, #0
 800763e:	dbec      	blt.n	800761a <__swhatbuf_r+0x12>
 8007640:	9901      	ldr	r1, [sp, #4]
 8007642:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007646:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800764a:	4259      	negs	r1, r3
 800764c:	4159      	adcs	r1, r3
 800764e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007652:	e7eb      	b.n	800762c <__swhatbuf_r+0x24>

08007654 <__smakebuf_r>:
 8007654:	898b      	ldrh	r3, [r1, #12]
 8007656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007658:	079d      	lsls	r5, r3, #30
 800765a:	4606      	mov	r6, r0
 800765c:	460c      	mov	r4, r1
 800765e:	d507      	bpl.n	8007670 <__smakebuf_r+0x1c>
 8007660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	6123      	str	r3, [r4, #16]
 8007668:	2301      	movs	r3, #1
 800766a:	6163      	str	r3, [r4, #20]
 800766c:	b002      	add	sp, #8
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	ab01      	add	r3, sp, #4
 8007672:	466a      	mov	r2, sp
 8007674:	f7ff ffc8 	bl	8007608 <__swhatbuf_r>
 8007678:	9900      	ldr	r1, [sp, #0]
 800767a:	4605      	mov	r5, r0
 800767c:	4630      	mov	r0, r6
 800767e:	f7ff fb0f 	bl	8006ca0 <_malloc_r>
 8007682:	b948      	cbnz	r0, 8007698 <__smakebuf_r+0x44>
 8007684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007688:	059a      	lsls	r2, r3, #22
 800768a:	d4ef      	bmi.n	800766c <__smakebuf_r+0x18>
 800768c:	f023 0303 	bic.w	r3, r3, #3
 8007690:	f043 0302 	orr.w	r3, r3, #2
 8007694:	81a3      	strh	r3, [r4, #12]
 8007696:	e7e3      	b.n	8007660 <__smakebuf_r+0xc>
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	6020      	str	r0, [r4, #0]
 800769c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a0:	81a3      	strh	r3, [r4, #12]
 80076a2:	9b00      	ldr	r3, [sp, #0]
 80076a4:	6163      	str	r3, [r4, #20]
 80076a6:	9b01      	ldr	r3, [sp, #4]
 80076a8:	6120      	str	r0, [r4, #16]
 80076aa:	b15b      	cbz	r3, 80076c4 <__smakebuf_r+0x70>
 80076ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076b0:	4630      	mov	r0, r6
 80076b2:	f000 f81d 	bl	80076f0 <_isatty_r>
 80076b6:	b128      	cbz	r0, 80076c4 <__smakebuf_r+0x70>
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	f043 0301 	orr.w	r3, r3, #1
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	431d      	orrs	r5, r3
 80076c8:	81a5      	strh	r5, [r4, #12]
 80076ca:	e7cf      	b.n	800766c <__smakebuf_r+0x18>

080076cc <_fstat_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d07      	ldr	r5, [pc, #28]	; (80076ec <_fstat_r+0x20>)
 80076d0:	2300      	movs	r3, #0
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	602b      	str	r3, [r5, #0]
 80076da:	f7fc f942 	bl	8003962 <_fstat>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d102      	bne.n	80076e8 <_fstat_r+0x1c>
 80076e2:	682b      	ldr	r3, [r5, #0]
 80076e4:	b103      	cbz	r3, 80076e8 <_fstat_r+0x1c>
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
 80076ea:	bf00      	nop
 80076ec:	200002cc 	.word	0x200002cc

080076f0 <_isatty_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d06      	ldr	r5, [pc, #24]	; (800770c <_isatty_r+0x1c>)
 80076f4:	2300      	movs	r3, #0
 80076f6:	4604      	mov	r4, r0
 80076f8:	4608      	mov	r0, r1
 80076fa:	602b      	str	r3, [r5, #0]
 80076fc:	f7fc f941 	bl	8003982 <_isatty>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d102      	bne.n	800770a <_isatty_r+0x1a>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	b103      	cbz	r3, 800770a <_isatty_r+0x1a>
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	200002cc 	.word	0x200002cc

08007710 <_init>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	bf00      	nop
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr

0800771c <_fini>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr
